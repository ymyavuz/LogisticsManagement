{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufmertyavuz/Desktop/nakliyeemm/src/app/api/dashboard-ozet/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// Toplam fiyatı hesapla (MT * Birim Fiyat)\nconst hesaplaToplamFiyat = (sefer: any, birimFiyat: number): number => {\n  // YAP-İstanbul (sirket_id=2) için birim fiyat doğrudan toplam fiyat olarak kullanılır\n  if (sefer.sirket_id === 2) {\n    return birimFiyat;\n  }\n  \n  // Diğer şirketler için MT * Birim Fiyat formülü uygulanır\n  const mt = sefer.mt || 0;\n  return mt * birimFiyat;\n};\n\n// KDV hesapla (gelirin %20'si)\nconst hesaplaKDV = (gelir: number): number => {\n  return gelir * 0.20; // %20 KDV\n};\n\n// KDV dahil gelir hesapla\nconst hesaplaKDVDahilGelir = (sefer: any, birimFiyat: number): number => {\n  const temelGelir = hesaplaToplamFiyat(sefer, birimFiyat);\n  const kdv = hesaplaKDV(temelGelir);\n  return temelGelir + kdv;\n};\n\n// Tevkifat hesapla (fatura tutarının %4'ü)\nconst hesaplaTevkifat = (faturaFiyati: number): number => {\n  return faturaFiyati * 0.04; // %4 tevkifat\n};\n\nexport async function GET(request: NextRequest) {\n  try {\n    const now = new Date();\n    const currentMonth = now.getMonth() + 1; // JavaScript ayları 0-11 arası\n    const currentYear = now.getFullYear();\n    const previousMonth = currentMonth === 1 ? 12 : currentMonth - 1;\n    const previousMonthYear = currentMonth === 1 ? currentYear - 1 : currentYear;\n\n    // Önceki ayın seferlerini al (kar hesaplaması için)\n    const oncekiAySeferler = await prisma.seferler.findMany({\n      where: {\n        ay: previousMonth\n      },\n      include: {\n        sirket: true,\n        arac: true\n      }\n    });\n\n    // Önceki ay kar hesaplaması - şirket bazında\n    const sirketKarlari = oncekiAySeferler.reduce((acc: any, sefer) => {\n      const sirketId = sefer.sirket_id;\n      const sirketAdi = sefer.sirket?.sirket_adi || 'Bilinmeyen Şirket';\n      \n      if (!acc[sirketId]) {\n        acc[sirketId] = {\n          sirket_adi: sirketAdi,\n          gelir: 0,\n          kdv: 0,\n          gider: 0,\n          soforKdv: 0,\n          tevkifat: 0,\n          kar: 0\n        };\n      }\n      \n      const kdvDahilGelir = hesaplaKDVDahilGelir(sefer, sefer.sirketten_alinan_ucret);\n      const temelGelir = hesaplaToplamFiyat(sefer, sefer.sirketten_alinan_ucret);\n      const kdv = hesaplaKDV(temelGelir);\n      const gider = hesaplaToplamFiyat(sefer, sefer.sofore_odenen_ucret);\n      \n      // Şöför giderlerine de %20 KDV ekle\n      const soforKdv = hesaplaKDV(gider);\n      \n      // Tevkifat hesaplaması - sadece fatura fiyatı varsa hesapla\n      let tevkifat = 0;\n      if (sefer.sofor_fatura_ucreti && sefer.sofor_fatura_ucreti > 0) {\n        const faturaToplamFiyat = hesaplaToplamFiyat(sefer, sefer.sofor_fatura_ucreti);\n        tevkifat = hesaplaTevkifat(faturaToplamFiyat);\n      }\n      \n      acc[sirketId].gelir += temelGelir; // KDV hariç gelir\n      acc[sirketId].kdv += kdv;\n      acc[sirketId].gider += gider;\n      acc[sirketId].soforKdv += soforKdv; // Şöför gider KDV'si\n      acc[sirketId].tevkifat += tevkifat;\n      \n      return acc;\n    }, {});\n\n    // Şirket karlarını hesapla - YAP-İstanbul için özel mantık\n    Object.keys(sirketKarlari).forEach(sirketId => {\n      const sirket = sirketKarlari[sirketId];\n      let toplamGider = 0;\n      \n      if (parseInt(sirketId) === 2) {\n        // YAP-İstanbul için: Ham gider + (Ham gider/5) - (Ham gider/25)\n        const hamGider = sirket.gider;\n        const kdvTutari = hamGider / 5; // %20 KDV\n        const tevkifatTutari = hamGider / 25; // %4 tevkifat\n        toplamGider = hamGider + kdvTutari - tevkifatTutari;\n      } else {\n        toplamGider = sirket.gider + sirket.soforKdv + sirket.tevkifat;\n      }\n      \n      sirket.kar = (sirket.gelir + sirket.kdv) - toplamGider;\n    });\n\n    // Şirket karlarını diziye çevir (sıralama yok)\n    const sirketKarlariDizi = Object.values(sirketKarlari);\n\n    // Toplam kar hesapla\n    const toplamKar = sirketKarlariDizi.reduce((toplam: number, sirket: any) => toplam + sirket.kar, 0);\n\n    // Belirli araçların kar hesaplaması (ID: 3, 4, 6, 8)\n    const hedefAraclar = [3, 4, 6, 8];\n    \n    // Önce araç masraflarını al\n    const aracMasraflari = await prisma.aracOdemeKayitlari.findMany({\n      where: {\n        arac_id: {\n          in: hedefAraclar\n        },\n        odeme_tarihi: {\n          gte: new Date(previousMonthYear, previousMonth - 1, 1),\n          lt: new Date(previousMonthYear, previousMonth, 1)\n        }\n      },\n      include: {\n        arac: true\n      }\n    });\n    \n    const aracKarlari = oncekiAySeferler.reduce((acc: any, sefer) => {\n      const aracId = sefer.arac_id;\n      \n      // Sadece hedef araçları işle ve arac_id null değilse\n      if (!aracId || !hedefAraclar.includes(aracId)) {\n        return acc;\n      }\n      \n      const aracPlaka = sefer.arac?.plaka || `Araç ${aracId}`;\n      const soforAdi = sefer.arac?.sofor_adi || 'Bilinmeyen Şöför';\n      \n      if (!acc[aracId]) {\n        acc[aracId] = {\n          arac_id: aracId,\n          plaka: aracPlaka,\n          sofor_adi: soforAdi,\n          gelir: 0,\n          gider: 0,\n          kar: 0,\n          seferSayisi: 0\n        };\n      }\n      \n      // Araç sahibi açısından: gelir = şöföre ödenen ücret\n      const gelir = hesaplaToplamFiyat(sefer, sefer.sofore_odenen_ucret || 0);\n      \n      acc[aracId].gelir += gelir;\n      acc[aracId].seferSayisi += 1;\n      \n      return acc;\n    }, {});\n\n    // Araç masraflarını ekle\n    aracMasraflari.forEach(masraf => {\n      const aracId = masraf.arac_id;\n      if (aracKarlari[aracId]) {\n        aracKarlari[aracId].gider += masraf.odeme_tutari;\n      }\n    });\n\n    // Kar hesapla\n    Object.keys(aracKarlari).forEach(aracId => {\n      aracKarlari[aracId].kar = aracKarlari[aracId].gelir - aracKarlari[aracId].gider;\n    });\n\n    // Araç karlarını diziye çevir (sıralama yok)\n    const aracKarlariDizi = Object.values(aracKarlari);\n\n    // Vadesi yaklaşan çekleri bul (5 gün veya daha az) - ödenme tarihine göre\n    const vadesiBesGunIcinde = new Date();\n    vadesiBesGunIcinde.setDate(vadesiBesGunIcinde.getDate() + 5);\n\n    const vadesiYaklasanCekler = await prisma.cekler.findMany({\n      where: {\n        durum: 'beklemede',\n        odenme_tarihi: {\n          not: null,\n          lte: vadesiBesGunIcinde\n        }\n      },\n      orderBy: {\n        odenme_tarihi: 'asc'\n      }\n    });\n\n    // Bugün vadesi geçen çekleri bul - ödenme tarihine göre\n    const bugun = new Date();\n    bugun.setHours(0, 0, 0, 0);\n\n    const vadesiGecenCekler = await prisma.cekler.findMany({\n      where: {\n        durum: 'beklemede',\n        odenme_tarihi: {\n          not: null,\n          lt: bugun\n        }\n      },\n      orderBy: {\n        odenme_tarihi: 'asc'\n      }\n    });\n\n    // Ay adlarını Türkçe'ye çevir\n    const ayAdlari = [\n      '', 'Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran',\n      'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'\n    ];\n\n    const response = {\n      oncekiAy: {\n        ay: previousMonth,\n        ayAdi: ayAdlari[previousMonth],\n        yil: previousMonthYear,\n        toplamKar,\n        sirketKarlari: sirketKarlariDizi.slice(0, 5), // En iyi 5 şirket\n        aracKarlari: aracKarlariDizi, // Belirli araçların kar durumu\n        seferSayisi: oncekiAySeferler.length\n      },\n      vadesiYaklasanCekler: {\n        besGunIcinde: vadesiYaklasanCekler.map(cek => ({\n          ...cek,\n          kalanGun: Math.ceil((new Date(cek.odenme_tarihi!).getTime() - now.getTime()) / (1000 * 60 * 60 * 24))\n        })),\n        vadesiGecen: vadesiGecenCekler.map(cek => ({\n          ...cek,\n          gecenGun: Math.ceil((now.getTime() - new Date(cek.odenme_tarihi!).getTime()) / (1000 * 60 * 60 * 24))\n        }))\n      },\n      uyarilar: {\n        vadesiYaklasanSayisi: vadesiYaklasanCekler.length,\n        vadesiGecenSayisi: vadesiGecenCekler.length,\n        toplamUyariTutari: [...vadesiYaklasanCekler, ...vadesiGecenCekler].reduce((sum, cek) => sum + cek.tutar, 0)\n      }\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('Dashboard özet verisi alınırken hata:', error);\n    return NextResponse.json(\n      { error: 'Dashboard özet verisi alınırken bir hata oluştu' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAE/B,2CAA2C;AAC3C,MAAM,qBAAqB,CAAC,OAAY;IACtC,sFAAsF;IACtF,IAAI,MAAM,SAAS,KAAK,GAAG;QACzB,OAAO;IACT;IAEA,0DAA0D;IAC1D,MAAM,KAAK,MAAM,EAAE,IAAI;IACvB,OAAO,KAAK;AACd;AAEA,+BAA+B;AAC/B,MAAM,aAAa,CAAC;IAClB,OAAO,QAAQ,MAAM,UAAU;AACjC;AAEA,0BAA0B;AAC1B,MAAM,uBAAuB,CAAC,OAAY;IACxC,MAAM,aAAa,mBAAmB,OAAO;IAC7C,MAAM,MAAM,WAAW;IACvB,OAAO,aAAa;AACtB;AAEA,2CAA2C;AAC3C,MAAM,kBAAkB,CAAC;IACvB,OAAO,eAAe,MAAM,cAAc;AAC5C;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,MAAM,IAAI;QAChB,MAAM,eAAe,IAAI,QAAQ,KAAK,GAAG,+BAA+B;QACxE,MAAM,cAAc,IAAI,WAAW;QACnC,MAAM,gBAAgB,iBAAiB,IAAI,KAAK,eAAe;QAC/D,MAAM,oBAAoB,iBAAiB,IAAI,cAAc,IAAI;QAEjE,oDAAoD;QACpD,MAAM,mBAAmB,MAAM,OAAO,QAAQ,CAAC,QAAQ,CAAC;YACtD,OAAO;gBACL,IAAI;YACN;YACA,SAAS;gBACP,QAAQ;gBACR,MAAM;YACR;QACF;QAEA,6CAA6C;QAC7C,MAAM,gBAAgB,iBAAiB,MAAM,CAAC,CAAC,KAAU;YACvD,MAAM,WAAW,MAAM,SAAS;YAChC,MAAM,YAAY,MAAM,MAAM,EAAE,cAAc;YAE9C,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE;gBAClB,GAAG,CAAC,SAAS,GAAG;oBACd,YAAY;oBACZ,OAAO;oBACP,KAAK;oBACL,OAAO;oBACP,UAAU;oBACV,UAAU;oBACV,KAAK;gBACP;YACF;YAEA,MAAM,gBAAgB,qBAAqB,OAAO,MAAM,sBAAsB;YAC9E,MAAM,aAAa,mBAAmB,OAAO,MAAM,sBAAsB;YACzE,MAAM,MAAM,WAAW;YACvB,MAAM,QAAQ,mBAAmB,OAAO,MAAM,mBAAmB;YAEjE,oCAAoC;YACpC,MAAM,WAAW,WAAW;YAE5B,4DAA4D;YAC5D,IAAI,WAAW;YACf,IAAI,MAAM,mBAAmB,IAAI,MAAM,mBAAmB,GAAG,GAAG;gBAC9D,MAAM,oBAAoB,mBAAmB,OAAO,MAAM,mBAAmB;gBAC7E,WAAW,gBAAgB;YAC7B;YAEA,GAAG,CAAC,SAAS,CAAC,KAAK,IAAI,YAAY,kBAAkB;YACrD,GAAG,CAAC,SAAS,CAAC,GAAG,IAAI;YACrB,GAAG,CAAC,SAAS,CAAC,KAAK,IAAI;YACvB,GAAG,CAAC,SAAS,CAAC,QAAQ,IAAI,UAAU,qBAAqB;YACzD,GAAG,CAAC,SAAS,CAAC,QAAQ,IAAI;YAE1B,OAAO;QACT,GAAG,CAAC;QAEJ,2DAA2D;QAC3D,OAAO,IAAI,CAAC,eAAe,OAAO,CAAC,CAAA;YACjC,MAAM,SAAS,aAAa,CAAC,SAAS;YACtC,IAAI,cAAc;YAElB,IAAI,SAAS,cAAc,GAAG;gBAC5B,gEAAgE;gBAChE,MAAM,WAAW,OAAO,KAAK;gBAC7B,MAAM,YAAY,WAAW,GAAG,UAAU;gBAC1C,MAAM,iBAAiB,WAAW,IAAI,cAAc;gBACpD,cAAc,WAAW,YAAY;YACvC,OAAO;gBACL,cAAc,OAAO,KAAK,GAAG,OAAO,QAAQ,GAAG,OAAO,QAAQ;YAChE;YAEA,OAAO,GAAG,GAAG,AAAC,OAAO,KAAK,GAAG,OAAO,GAAG,GAAI;QAC7C;QAEA,+CAA+C;QAC/C,MAAM,oBAAoB,OAAO,MAAM,CAAC;QAExC,qBAAqB;QACrB,MAAM,YAAY,kBAAkB,MAAM,CAAC,CAAC,QAAgB,SAAgB,SAAS,OAAO,GAAG,EAAE;QAEjG,qDAAqD;QACrD,MAAM,eAAe;YAAC;YAAG;YAAG;YAAG;SAAE;QAEjC,4BAA4B;QAC5B,MAAM,iBAAiB,MAAM,OAAO,kBAAkB,CAAC,QAAQ,CAAC;YAC9D,OAAO;gBACL,SAAS;oBACP,IAAI;gBACN;gBACA,cAAc;oBACZ,KAAK,IAAI,KAAK,mBAAmB,gBAAgB,GAAG;oBACpD,IAAI,IAAI,KAAK,mBAAmB,eAAe;gBACjD;YACF;YACA,SAAS;gBACP,MAAM;YACR;QACF;QAEA,MAAM,cAAc,iBAAiB,MAAM,CAAC,CAAC,KAAU;YACrD,MAAM,SAAS,MAAM,OAAO;YAE5B,qDAAqD;YACrD,IAAI,CAAC,UAAU,CAAC,aAAa,QAAQ,CAAC,SAAS;gBAC7C,OAAO;YACT;YAEA,MAAM,YAAY,MAAM,IAAI,EAAE,SAAS,CAAC,KAAK,EAAE,QAAQ;YACvD,MAAM,WAAW,MAAM,IAAI,EAAE,aAAa;YAE1C,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE;gBAChB,GAAG,CAAC,OAAO,GAAG;oBACZ,SAAS;oBACT,OAAO;oBACP,WAAW;oBACX,OAAO;oBACP,OAAO;oBACP,KAAK;oBACL,aAAa;gBACf;YACF;YAEA,qDAAqD;YACrD,MAAM,QAAQ,mBAAmB,OAAO,MAAM,mBAAmB,IAAI;YAErE,GAAG,CAAC,OAAO,CAAC,KAAK,IAAI;YACrB,GAAG,CAAC,OAAO,CAAC,WAAW,IAAI;YAE3B,OAAO;QACT,GAAG,CAAC;QAEJ,yBAAyB;QACzB,eAAe,OAAO,CAAC,CAAA;YACrB,MAAM,SAAS,OAAO,OAAO;YAC7B,IAAI,WAAW,CAAC,OAAO,EAAE;gBACvB,WAAW,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,YAAY;YAClD;QACF;QAEA,cAAc;QACd,OAAO,IAAI,CAAC,aAAa,OAAO,CAAC,CAAA;YAC/B,WAAW,CAAC,OAAO,CAAC,GAAG,GAAG,WAAW,CAAC,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC,OAAO,CAAC,KAAK;QACjF;QAEA,6CAA6C;QAC7C,MAAM,kBAAkB,OAAO,MAAM,CAAC;QAEtC,0EAA0E;QAC1E,MAAM,qBAAqB,IAAI;QAC/B,mBAAmB,OAAO,CAAC,mBAAmB,OAAO,KAAK;QAE1D,MAAM,uBAAuB,MAAM,OAAO,MAAM,CAAC,QAAQ,CAAC;YACxD,OAAO;gBACL,OAAO;gBACP,eAAe;oBACb,KAAK;oBACL,KAAK;gBACP;YACF;YACA,SAAS;gBACP,eAAe;YACjB;QACF;QAEA,wDAAwD;QACxD,MAAM,QAAQ,IAAI;QAClB,MAAM,QAAQ,CAAC,GAAG,GAAG,GAAG;QAExB,MAAM,oBAAoB,MAAM,OAAO,MAAM,CAAC,QAAQ,CAAC;YACrD,OAAO;gBACL,OAAO;gBACP,eAAe;oBACb,KAAK;oBACL,IAAI;gBACN;YACF;YACA,SAAS;gBACP,eAAe;YACjB;QACF;QAEA,8BAA8B;QAC9B,MAAM,WAAW;YACf;YAAI;YAAQ;YAAS;YAAQ;YAAS;YAAS;YAC/C;YAAU;YAAW;YAAS;YAAQ;YAAS;SAChD;QAED,MAAM,WAAW;YACf,UAAU;gBACR,IAAI;gBACJ,OAAO,QAAQ,CAAC,cAAc;gBAC9B,KAAK;gBACL;gBACA,eAAe,kBAAkB,KAAK,CAAC,GAAG;gBAC1C,aAAa;gBACb,aAAa,iBAAiB,MAAM;YACtC;YACA,sBAAsB;gBACpB,cAAc,qBAAqB,GAAG,CAAC,CAAA,MAAO,CAAC;wBAC7C,GAAG,GAAG;wBACN,UAAU,KAAK,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,aAAa,EAAG,OAAO,KAAK,IAAI,OAAO,EAAE,IAAI,CAAC,OAAO,KAAK,KAAK,EAAE;oBACrG,CAAC;gBACD,aAAa,kBAAkB,GAAG,CAAC,CAAA,MAAO,CAAC;wBACzC,GAAG,GAAG;wBACN,UAAU,KAAK,IAAI,CAAC,CAAC,IAAI,OAAO,KAAK,IAAI,KAAK,IAAI,aAAa,EAAG,OAAO,EAAE,IAAI,CAAC,OAAO,KAAK,KAAK,EAAE;oBACrG,CAAC;YACH;YACA,UAAU;gBACR,sBAAsB,qBAAqB,MAAM;gBACjD,mBAAmB,kBAAkB,MAAM;gBAC3C,mBAAmB;uBAAI;uBAAyB;iBAAkB,CAAC,MAAM,CAAC,CAAC,KAAK,MAAQ,MAAM,IAAI,KAAK,EAAE;YAC3G;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yCAAyC;QACvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAkD,GAC3D;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF","debugId":null}}]
}