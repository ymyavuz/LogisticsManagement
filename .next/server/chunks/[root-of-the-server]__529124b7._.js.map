{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufmertyavuz/Desktop/nakliyeemm/src/app/api/masraf-tipleri/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport async function GET(request: NextRequest) {\n  try {\n    const masrafTipleri = await prisma.aracMasrafTipleri.findMany({\n      orderBy: {\n        tip_adi: 'asc'\n      }\n    });\n\n    return NextResponse.json(masrafTipleri);\n\n  } catch (error) {\n    console.error('Masraf tipleri getirme hatası:', error);\n    return NextResponse.json(\n      { error: 'Masraf tipleri getirilirken bir hata oluştu' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { tip_adi } = body;\n\n    // Validasyon\n    if (!tip_adi) {\n      return NextResponse.json(\n        { error: 'Tip adı zorunludur' },\n        { status: 400 }\n      );\n    }\n\n    // Aynı isimde tip var mı kontrol et\n    const mevcutTip = await prisma.aracMasrafTipleri.findFirst({\n      where: {\n        tip_adi: tip_adi.trim()\n      }\n    });\n\n    if (mevcutTip) {\n      return NextResponse.json(\n        { error: 'Bu isimde bir masraf tipi zaten mevcut' },\n        { status: 400 }\n      );\n    }\n\n    // Yeni masraf tipi oluştur\n    const yeniTip = await prisma.aracMasrafTipleri.create({\n      data: {\n        tip_adi: tip_adi.trim()\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      masrafTipi: yeniTip\n    });\n\n  } catch (error) {\n    console.error('Masraf tipi ekleme hatası:', error);\n    return NextResponse.json(\n      { error: 'Masraf tipi eklenirken bir hata oluştu' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,gBAAgB,MAAM,OAAO,iBAAiB,CAAC,QAAQ,CAAC;YAC5D,SAAS;gBACP,SAAS;YACX;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA8C,GACvD;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,OAAO,EAAE,GAAG;QAEpB,aAAa;QACb,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,oCAAoC;QACpC,MAAM,YAAY,MAAM,OAAO,iBAAiB,CAAC,SAAS,CAAC;YACzD,OAAO;gBACL,SAAS,QAAQ,IAAI;YACvB;QACF;QAEA,IAAI,WAAW;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyC,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,2BAA2B;QAC3B,MAAM,UAAU,MAAM,OAAO,iBAAiB,CAAC,MAAM,CAAC;YACpD,MAAM;gBACJ,SAAS,QAAQ,IAAI;YACvB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,YAAY;QACd;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyC,GAClD;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF","debugId":null}}]
}