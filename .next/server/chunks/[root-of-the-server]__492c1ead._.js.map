{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufmertyavuz/Desktop/nakliyeemm/src/app/api/fiyat-listesi/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// GET isteği - Tüm fiyat listelerini getir\nexport async function GET(request: NextRequest) {\n  try {\n    const tip = request.nextUrl.searchParams.get('tip') || 'hepsi';\n    const sirketId = request.nextUrl.searchParams.get('sirket_id');\n    const aracTipi = request.nextUrl.searchParams.get('arac_tipi');\n    \n    // Yeni birleşik sorgumuz, şimdi sofor_ucreti alanını içeren güncellenmiş yapıyı kullanıyor\n    let where: any = {};\n    if (sirketId) {\n      where.sirket_id = parseInt(sirketId);\n    }\n    \n    // Araç tipine göre filtreleme\n    if (aracTipi) {\n      where.arac_tipi = aracTipi;\n    }\n    \n    // Fiyat tipine göre filtreleme - sadece null olmayan değerleri getir\n    if (tip === 'sirket') {\n      where.ucret = { gt: 0 }; // 0'dan büyük değerler\n    } else if (tip === 'sofor') {\n      where.sofor_ucreti = { gt: 0 }; // 0'dan büyük değerler\n    }\n    \n    console.log('Fiyat listesi sorgusu:', { sirketId, aracTipi, tip, where });\n    \n    // Fiyat listesini getir\n    const fiyatListesi = await prisma.sirketFiyatListesi.findMany({\n      where,\n      include: {\n        sirket: {\n          select: {\n            sirket_adi: true,\n          },\n        },\n      },\n      orderBy: {\n        tahliye_yeri: 'asc',\n      },\n    });\n    \n    return NextResponse.json(fiyatListesi);\n  } catch (error) {\n    console.error('Fiyat listesi getirme hatası:', error);\n    return NextResponse.json(\n      { error: 'Fiyat listesi alınırken bir hata oluştu' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST isteği - Yeni fiyat listesi ekle\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { sirket_id, tahliye_yeri, arac_tipi, ucret, sofor_ucreti, km } = body;\n\n    // Zorunlu alanları kontrol et\n    if (!sirket_id || !tahliye_yeri || !arac_tipi) {\n      return NextResponse.json(\n        { error: 'Şirket ID, tahliye yeri ve araç tipi zorunludur' },\n        { status: 400 }\n      );\n    }\n\n    // Yeni fiyat listesi kaydı oluştur\n    const yeniFiyatListesi = await prisma.sirketFiyatListesi.create({\n      data: {\n        sirket_id: parseInt(sirket_id),\n        tahliye_yeri,\n        arac_tipi,\n        ucret: ucret ? parseFloat(ucret) : 0,\n        sofor_ucreti: sofor_ucreti ? parseFloat(sofor_ucreti) : null,\n        km: km ? parseFloat(km) : null\n      },\n      include: {\n        sirket: {\n          select: {\n            sirket_adi: true,\n          },\n        },\n      },\n    });\n\n    return NextResponse.json(yeniFiyatListesi, { status: 201 });\n  } catch (error: any) {\n    console.error('Fiyat listesi ekleme hatası:', error);\n    \n    // Unique constraint hatası\n    if (error.code === 'P2002') {\n      return NextResponse.json(\n        { error: 'Bu şirket ve tahliye yeri için zaten bir kayıt mevcut' },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Fiyat listesi eklenirken bir hata oluştu' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAGxB,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,MAAM,QAAQ,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU;QACvD,MAAM,WAAW,QAAQ,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC;QAClD,MAAM,WAAW,QAAQ,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC;QAElD,2FAA2F;QAC3F,IAAI,QAAa,CAAC;QAClB,IAAI,UAAU;YACZ,MAAM,SAAS,GAAG,SAAS;QAC7B;QAEA,8BAA8B;QAC9B,IAAI,UAAU;YACZ,MAAM,SAAS,GAAG;QACpB;QAEA,qEAAqE;QACrE,IAAI,QAAQ,UAAU;YACpB,MAAM,KAAK,GAAG;gBAAE,IAAI;YAAE,GAAG,uBAAuB;QAClD,OAAO,IAAI,QAAQ,SAAS;YAC1B,MAAM,YAAY,GAAG;gBAAE,IAAI;YAAE,GAAG,uBAAuB;QACzD;QAEA,QAAQ,GAAG,CAAC,0BAA0B;YAAE;YAAU;YAAU;YAAK;QAAM;QAEvE,wBAAwB;QACxB,MAAM,eAAe,MAAM,OAAO,kBAAkB,CAAC,QAAQ,CAAC;YAC5D;YACA,SAAS;gBACP,QAAQ;oBACN,QAAQ;wBACN,YAAY;oBACd;gBACF;YACF;YACA,SAAS;gBACP,cAAc;YAChB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA0C,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,EAAE,GAAG;QAExE,8BAA8B;QAC9B,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,WAAW;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkD,GAC3D;gBAAE,QAAQ;YAAI;QAElB;QAEA,mCAAmC;QACnC,MAAM,mBAAmB,MAAM,OAAO,kBAAkB,CAAC,MAAM,CAAC;YAC9D,MAAM;gBACJ,WAAW,SAAS;gBACpB;gBACA;gBACA,OAAO,QAAQ,WAAW,SAAS;gBACnC,cAAc,eAAe,WAAW,gBAAgB;gBACxD,IAAI,KAAK,WAAW,MAAM;YAC5B;YACA,SAAS;gBACP,QAAQ;oBACN,QAAQ;wBACN,YAAY;oBACd;gBACF;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,kBAAkB;YAAE,QAAQ;QAAI;IAC3D,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,gCAAgC;QAE9C,2BAA2B;QAC3B,IAAI,MAAM,IAAI,KAAK,SAAS;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwD,GACjE;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2C,GACpD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}