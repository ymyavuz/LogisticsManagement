{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufmertyavuz/Desktop/nakliyeemm/src/app/api/seferler/tumunu-listele/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport async function GET(request: NextRequest) {\n  try {\n    // URL'den parametreleri al\n    const searchParams = request.nextUrl.searchParams;\n    const ay = searchParams.get('ay');\n    const donem = searchParams.get('donem');\n    const sirketId = searchParams.get('sirketId');\n\n    // Parametrelerin doğruluğunu kontrol et\n    if (!ay || !donem) {\n      return NextResponse.json(\n        { error: 'Ay ve dönem parametreleri gereklidir' },\n        { status: 400 }\n      );\n    }\n\n    // Sayısal değerlere dönüştür\n    const ayNum = parseInt(ay);\n    const donemNum = parseInt(donem);\n    const sirketIdNum = sirketId ? parseInt(sirketId) : null;\n\n    // Veritabanından seferleri sorgula\n    const seferler = await prisma.seferler.findMany({\n      where: {\n        ...(ayNum && { ay: ayNum }),\n        ...(donemNum && { donem: donemNum }),\n        ...(sirketIdNum && { sirket_id: sirketIdNum })\n      } as any,\n      include: {\n        sirket: true,\n        arac: true\n      },\n      orderBy: [\n        {\n          sirket_id: 'asc'\n        },\n        {\n          arac_id: 'asc'\n        },\n        // Sıra numarasını sayısal olarak sıralamak için sorguda sort fonksiyonu kullanamadığımızdan\n        // sonuçları JavaScript ile sıralayacağız\n        {\n          sira_no: 'asc'\n        }\n      ]\n    });\n\n    // Sıra numaralarını sayısal değere çevirerek sıralama\n    const sortedSeferler = [...seferler].sort((a, b) => {\n      // Önce şirket ID'sine göre sırala\n      if (a.sirket_id !== b.sirket_id) {\n        return a.sirket_id - b.sirket_id;\n      }\n      \n      // Sonra araç ID'sine göre sırala\n      if (a.arac_id !== b.arac_id) {\n        return (a.arac_id || 0) - (b.arac_id || 0);\n      }\n      \n      // Son olarak sıra numarasına göre sayısal sıralama yap\n      const aNum = parseInt(a.sira_no.toString());\n      const bNum = parseInt(b.sira_no.toString());\n      return aNum - bNum;\n    });\n\n    return NextResponse.json(sortedSeferler);\n  } catch (error) {\n    console.error('Seferler listelenirken hata oluştu:', error);\n    return NextResponse.json(\n      { error: 'Seferler listelenirken bir hata oluştu' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,2BAA2B;QAC3B,MAAM,eAAe,QAAQ,OAAO,CAAC,YAAY;QACjD,MAAM,KAAK,aAAa,GAAG,CAAC;QAC5B,MAAM,QAAQ,aAAa,GAAG,CAAC;QAC/B,MAAM,WAAW,aAAa,GAAG,CAAC;QAElC,wCAAwC;QACxC,IAAI,CAAC,MAAM,CAAC,OAAO;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,6BAA6B;QAC7B,MAAM,QAAQ,SAAS;QACvB,MAAM,WAAW,SAAS;QAC1B,MAAM,cAAc,WAAW,SAAS,YAAY;QAEpD,mCAAmC;QACnC,MAAM,WAAW,MAAM,OAAO,QAAQ,CAAC,QAAQ,CAAC;YAC9C,OAAO;gBACL,GAAI,SAAS;oBAAE,IAAI;gBAAM,CAAC;gBAC1B,GAAI,YAAY;oBAAE,OAAO;gBAAS,CAAC;gBACnC,GAAI,eAAe;oBAAE,WAAW;gBAAY,CAAC;YAC/C;YACA,SAAS;gBACP,QAAQ;gBACR,MAAM;YACR;YACA,SAAS;gBACP;oBACE,WAAW;gBACb;gBACA;oBACE,SAAS;gBACX;gBACA,4FAA4F;gBAC5F,yCAAyC;gBACzC;oBACE,SAAS;gBACX;aACD;QACH;QAEA,sDAAsD;QACtD,MAAM,iBAAiB;eAAI;SAAS,CAAC,IAAI,CAAC,CAAC,GAAG;YAC5C,kCAAkC;YAClC,IAAI,EAAE,SAAS,KAAK,EAAE,SAAS,EAAE;gBAC/B,OAAO,EAAE,SAAS,GAAG,EAAE,SAAS;YAClC;YAEA,iCAAiC;YACjC,IAAI,EAAE,OAAO,KAAK,EAAE,OAAO,EAAE;gBAC3B,OAAO,CAAC,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,IAAI,CAAC;YAC3C;YAEA,uDAAuD;YACvD,MAAM,OAAO,SAAS,EAAE,OAAO,CAAC,QAAQ;YACxC,MAAM,OAAO,SAAS,EAAE,OAAO,CAAC,QAAQ;YACxC,OAAO,OAAO;QAChB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uCAAuC;QACrD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAyC,GAClD;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF","debugId":null}}]
}