{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufmertyavuz/Desktop/nakliyeemm/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nexport const prisma = global.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') {\n  global.prisma = prisma;\n} "],"names":[],"mappings":";;;AAAA;;AAMO,MAAM,SAAS,OAAO,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEvD,wCAA2C;IACzC,OAAO,MAAM,GAAG;AAClB","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufmertyavuz/Desktop/nakliyeemm/src/app/api/arac-muhasebe-raporu/route.ts"],"sourcesContent":["import { NextResponse, NextRequest } from 'next/server';\nimport { prisma } from '@/lib/db';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const yil = searchParams.get('yil') || new Date().getFullYear().toString();\n\n    // Tüm araçları getir\n    const araclar = await prisma.araclar.findMany({\n      orderBy: {\n        plaka: 'asc'\n      }\n    });\n\n    // Yıl için tüm seferleri getir\n    const seferler = await prisma.seferler.findMany({\n      include: {\n        arac: true\n      }\n    });\n\n    // Yıl için tüm araç masraflarını getir\n    const masraflar = await prisma.aracOdemeKayitlari.findMany({\n      where: {\n        odeme_tarihi: {\n          gte: new Date(`${yil}-01-01`),\n          lt: new Date(`${parseInt(yil) + 1}-01-01`)\n        }\n      }\n    });\n\n    // Her araç için aylık gelir-gider hesapla\n    const aracBazindaAylikVeriler: any[] = [];\n\n    for (const arac of araclar) {\n      const aracVerisi: any = {\n        arac_id: arac.arac_id,\n        plaka: arac.plaka,\n        sofor_adi: arac.sofor_adi,\n        aylikVeriler: {},\n        yillikToplam: {\n          gelir: 0,\n          gider: 0,\n          tevkifat: 0,\n          kar: 0\n        },\n        // Detaylı hesaplama bilgileri için yeni alan ekliyoruz\n        detayliHesaplar: {\n          aylikDetaylar: {},\n          yillikDetay: {\n            hamGelir: 0,\n            kdvTutari: 0,\n            kdvDahilTutar: 0,\n            tevkifatTutari: 0,\n            netGelir: 0,\n            gider: 0,\n            kar: 0,\n            sirketTevkifatTutari: 0,\n            // Sefer bazında hesaplama detayları\n            seferlerBilgileri: []\n          }\n        }\n      };\n\n      // 12 ay için başlangıç değerleri\n      for (let ay = 1; ay <= 12; ay++) {\n        aracVerisi.aylikVeriler[ay] = {\n          gelir: 0,\n          gider: 0,\n          tevkifat: 0,\n          kar: 0\n        };\n        \n        // Detaylı hesaplar için ay bazında değerler\n        aracVerisi.detayliHesaplar.aylikDetaylar[ay] = {\n          hamGelir: 0,\n          kdvTutari: 0,\n          kdvDahilTutar: 0,\n          tevkifatTutari: 0,\n          netGelir: 0,\n          gider: 0,\n          kar: 0,\n          seferler: [],\n          sirketTevkifatTutari: 0\n        };\n      }\n\n      // Araç seferlerinden gelirleri hesapla - Veritabanındaki ay değerini kullan\n      const aracSeferleri = seferler.filter(s => s.arac_id === arac.arac_id);\n      \n      for (const sefer of aracSeferleri) {\n        // Sefer ay değeri kontrolü\n        if (!sefer.ay) continue;\n        \n        const ay = sefer.ay;\n        \n        // Ham gelir hesaplama - YAP-İstanbul için özel durum\n        let hamGelir = 0;\n        let hesaplamaYontemi = '';\n        \n        if (sefer.sirket_id === 2) { // YAP-İstanbul için MT ile çarpma yapılmayacak\n          hamGelir = sefer.sofore_odenen_ucret || 0;\n          hesaplamaYontemi = 'sofore_odenen_ucret (MT ile çarpılmadı)';\n          console.log(`Şirket ${sefer.sirket_id} (YAP-İstanbul) için gelir hesaplandı: Şoföre Ödenen: ${hamGelir} (MT ile çarpılmadı)`);\n        } else {\n          // Diğer tüm şirketler için MT ile çarpılacak\n          const birimFiyati = sefer.sofore_odenen_ucret || 0;\n          const mt = sefer.mt || 0;\n          hamGelir = birimFiyati * mt;\n          hesaplamaYontemi = 'sofore_odenen_ucret * MT';\n          console.log(`Şirket ${sefer.sirket_id} için gelir hesaplandı: Şoföre Ödenen: ${birimFiyati} * MT: ${mt} = ${hamGelir}`);\n        }\n        \n        // KDV hesaplama\n        const kdvTutari = hamGelir * 0.20; // %20 KDV\n        const kdvDahilTutar = hamGelir + kdvTutari; // KDV dahil tutar\n        \n        // Tevkifat hesaplama - Şoför raporu için KDV'nin %20'si\n        const tevkifatTutari = kdvTutari * 0.20; // tevkifat KDV'nin %20'si\n        const netGelir = kdvDahilTutar - tevkifatTutari; // Tevkifat düşülmüş gelir\n        \n        console.log(`Gelir: ${hamGelir} + KDV(%20): ${kdvTutari} = KDV Dahil: ${kdvDahilTutar}, Tevkifat(KDV'nin %20'si): ${tevkifatTutari}, Net: ${netGelir}`);\n        \n        // Şirket hesaplaması için sofor_fatura_ucreti bilgisi - bu kısım sadece şirket bilançosu hazırlanırken kullanılacak\n        const soforFaturaUcreti = sefer.sofor_fatura_ucreti || 0;\n        const faturaKdvTutari = soforFaturaUcreti * 0.20; // Fatura ücreti üzerinden KDV\n        const sirketIcinTevkifatTutari = faturaKdvTutari * 0.20; // Şirket için tevkifat fatura KDV'sinin %20'si\n        \n        // Sefer detaylarını kaydet\n        const seferDetay = {\n          sefer_id: sefer.sefer_id,\n          irsaliye_numarasi: sefer.irsaliye_numarasi,\n          irsaliye_tarihi: sefer.irsaliye_tarihi,\n          tahliye_yeri: sefer.tahliye_yeri,\n          mt: sefer.mt,\n          sirket_id: sefer.sirket_id,\n          birimFiyati: sefer.sofore_odenen_ucret || 0,\n          hamGelir: hamGelir,\n          kdvTutari: kdvTutari,\n          kdvDahilTutar: kdvDahilTutar,\n          tevkifatTutari: tevkifatTutari,\n          netGelir: netGelir,\n          // Şirket bilançosu için gerekli bilgiler\n          sirketHesaplama: {\n            soforFaturaUcreti: soforFaturaUcreti,\n            faturaKdvTutari: faturaKdvTutari,\n            sirketIcinTevkifatTutari: sirketIcinTevkifatTutari\n          }\n        };\n        \n        // Detaylı hesaplara ekle\n        aracVerisi.detayliHesaplar.aylikDetaylar[ay].hamGelir += hamGelir;\n        aracVerisi.detayliHesaplar.aylikDetaylar[ay].kdvTutari += kdvTutari;\n        aracVerisi.detayliHesaplar.aylikDetaylar[ay].kdvDahilTutar += kdvDahilTutar;\n        aracVerisi.detayliHesaplar.aylikDetaylar[ay].tevkifatTutari += tevkifatTutari;\n        aracVerisi.detayliHesaplar.aylikDetaylar[ay].netGelir += netGelir;\n        aracVerisi.detayliHesaplar.aylikDetaylar[ay].seferler.push(seferDetay);\n        \n        // Yıllık detay toplamlarına ekle\n        aracVerisi.detayliHesaplar.yillikDetay.hamGelir += hamGelir;\n        aracVerisi.detayliHesaplar.yillikDetay.kdvTutari += kdvTutari;\n        aracVerisi.detayliHesaplar.yillikDetay.kdvDahilTutar += kdvDahilTutar;\n        aracVerisi.detayliHesaplar.yillikDetay.tevkifatTutari += tevkifatTutari;\n        aracVerisi.detayliHesaplar.yillikDetay.netGelir += netGelir;\n        aracVerisi.detayliHesaplar.yillikDetay.seferlerBilgileri.push(seferDetay);\n        \n        // Şirket için tevkifat tutarını ayrı olarak kaydet\n        aracVerisi.detayliHesaplar.aylikDetaylar[ay].sirketTevkifatTutari += sirketIcinTevkifatTutari;\n        aracVerisi.detayliHesaplar.yillikDetay.sirketTevkifatTutari = \n          (aracVerisi.detayliHesaplar.yillikDetay.sirketTevkifatTutari || 0) + sirketIcinTevkifatTutari;\n          \n        // Şirket bilançosu için tevkifat değerlerini ayarla\n        aracVerisi.aylikVeriler[ay].tevkifat += sirketIcinTevkifatTutari;\n        aracVerisi.yillikToplam.tevkifat = (aracVerisi.yillikToplam.tevkifat || 0) + sirketIcinTevkifatTutari;\n        \n        // Mevcut hesaplama için\n        aracVerisi.aylikVeriler[ay].gelir += netGelir;\n        aracVerisi.yillikToplam.gelir += netGelir;\n      }\n\n      // Araç masraflarını hesapla\n      const aracMasraflari = masraflar.filter(m => m.arac_id === arac.arac_id);\n      \n      for (const masraf of aracMasraflari) {\n        const tarih = new Date(masraf.odeme_tarihi);\n        const ay = tarih.getMonth() + 1;\n        \n        const gider = masraf.odeme_tutari;\n        // Şöför bilançosunda KDV dahil edilmeyecek\n        const toplamGider = gider;\n        \n        // Masraf detayını ekle\n        const masrafDetay = {\n          odeme_id: masraf.odeme_id,\n          odeme_tarihi: masraf.odeme_tarihi,\n          gider: gider,\n          kdv: 0, // KDV sıfır\n          toplamGider: toplamGider,\n          aciklama: masraf.aciklama\n        };\n        \n        // Detaylı hesaplara masraf ekle\n        aracVerisi.detayliHesaplar.aylikDetaylar[ay].gider += toplamGider;\n        aracVerisi.detayliHesaplar.yillikDetay.gider += toplamGider;\n        \n        // Mevcut hesaplama için\n        aracVerisi.aylikVeriler[ay].gider += toplamGider;\n        aracVerisi.yillikToplam.gider += toplamGider;\n      }\n\n      // Kar hesapla\n      for (let ay = 1; ay <= 12; ay++) {\n        // Mevcut hesaplama\n        aracVerisi.aylikVeriler[ay].kar = aracVerisi.aylikVeriler[ay].gelir - aracVerisi.aylikVeriler[ay].gider;\n        \n        // Detaylı hesap için\n        aracVerisi.detayliHesaplar.aylikDetaylar[ay].kar = \n          aracVerisi.detayliHesaplar.aylikDetaylar[ay].netGelir - \n          aracVerisi.detayliHesaplar.aylikDetaylar[ay].gider;\n      }\n      \n      // Yıllık toplam kar\n      aracVerisi.yillikToplam.kar = aracVerisi.yillikToplam.gelir - aracVerisi.yillikToplam.gider;\n      aracVerisi.detayliHesaplar.yillikDetay.kar = \n        aracVerisi.detayliHesaplar.yillikDetay.netGelir - \n        aracVerisi.detayliHesaplar.yillikDetay.gider;\n\n      aracBazindaAylikVeriler.push(aracVerisi);\n    }\n\n    // Aylık toplamları hesapla\n    const aylikToplamlar: any = {};\n    for (let ay = 1; ay <= 12; ay++) {\n      aylikToplamlar[ay] = {\n        gelir: 0,\n        gider: 0,\n        tevkifat: 0,\n        kar: 0\n      };\n    }\n\n    for (const aracVeri of aracBazindaAylikVeriler) {\n      for (let ay = 1; ay <= 12; ay++) {\n        aylikToplamlar[ay].gelir += aracVeri.aylikVeriler[ay].gelir;\n        aylikToplamlar[ay].gider += aracVeri.aylikVeriler[ay].gider;\n        aylikToplamlar[ay].tevkifat += aracVeri.aylikVeriler[ay].tevkifat;\n        aylikToplamlar[ay].kar += aracVeri.aylikVeriler[ay].kar;\n      }\n    }\n\n    // Genel toplamlar\n    const genelToplam = {\n      gelir: 0,\n      gider: 0,\n      tevkifat: 0,\n      kar: 0\n    };\n\n    for (const aracVeri of aracBazindaAylikVeriler) {\n      genelToplam.gelir += aracVeri.yillikToplam.gelir;\n      genelToplam.gider += aracVeri.yillikToplam.gider;\n      genelToplam.tevkifat += aracVeri.yillikToplam.tevkifat || 0;\n      genelToplam.kar += aracVeri.yillikToplam.kar;\n    }\n\n    return NextResponse.json({\n      yil: parseInt(yil),\n      aracBazindaAylikVeriler,\n      aylikToplamlar,\n      genelToplam,\n      hesaplamaNotlari: {\n        kdv: \"Gelirlere %20 KDV dahil edilmiştir, giderlere KDV dahil edilmemiştir\",\n        soforTevkifat: \"Şoför hesaplamalarında KDV tutarının %20'si tevkifat olarak düşülmüştür\",\n        sirketTevkifat: \"Şirket bilançolarında sofor_fatura_ucreti üzerinden hesaplanan KDV'nin %20'si tevkifat olarak düşülmektedir\",\n        formul: \"Şoför Kar = [Gelir + (%20 KDV) - (KDV'nin %20'si tevkifat)] - Gider (KDV hariç)\",\n        yapIstanbulOzelDurum: \"YAP-İstanbul (ID:2) için MT ile çarpım yapılmamakta, doğrudan ödenen ücret kullanılmaktadır\",\n        detayliVersiyon: \"detayliHesaplar alanında tüm hesaplamalar ayrıntılı olarak verilmiştir\"\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Araç muhasebe raporu hatası:', error);\n    return NextResponse.json(\n      { error: 'Araç muhasebe raporu oluşturulurken bir hata oluştu: ' + error.message },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}