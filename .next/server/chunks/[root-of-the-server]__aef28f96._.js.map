{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufmertyavuz/Desktop/nakliyeemm/src/app/api/sofor-odemeler/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// GET - Tüm ödeme kayıtlarını getir\nexport async function GET(request: NextRequest) {\n  try {\n    const odemeler = await prisma.soforOdemeler.findMany({\n      orderBy: {\n        tarih: 'desc'\n      }\n    });\n\n    return NextResponse.json(odemeler);\n  } catch (error) {\n    console.error('Ödemeler getirme hatası:', error);\n    return NextResponse.json(\n      { error: 'Ödemeler getirilirken hata oluştu' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - Yeni ödeme ekle\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { sofor_adi, tutar, aciklama } = body;\n\n    if (!sofor_adi || !tutar) {\n      return NextResponse.json(\n        { error: 'Şöför adı ve tutar gereklidir' },\n        { status: 400 }\n      );\n    }\n\n    const yeniOdeme = await prisma.soforOdemeler.create({\n      data: {\n        sofor_adi,\n        tutar: parseFloat(tutar),\n        aciklama\n      }\n    });\n\n    return NextResponse.json(yeniOdeme);\n  } catch (error) {\n    console.error('Ödeme ekleme hatası:', error);\n    return NextResponse.json(\n      { error: 'Ödeme eklenirken hata oluştu' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE - Ödeme sil\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get('id');\n\n    if (!id) {\n      return NextResponse.json(\n        { error: 'ID gereklidir' },\n        { status: 400 }\n      );\n    }\n\n    await prisma.soforOdemeler.delete({\n      where: { id: parseInt(id) }\n    });\n\n    return NextResponse.json({ message: 'Ödeme başarıyla silindi' });\n  } catch (error) {\n    console.error('Ödeme silme hatası:', error);\n    return NextResponse.json(\n      { error: 'Ödeme silinirken hata oluştu' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAGxB,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,WAAW,MAAM,OAAO,aAAa,CAAC,QAAQ,CAAC;YACnD,SAAS;gBACP,OAAO;YACT;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAoC,GAC7C;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAEvC,IAAI,CAAC,aAAa,CAAC,OAAO;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgC,GACzC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,YAAY,MAAM,OAAO,aAAa,CAAC,MAAM,CAAC;YAClD,MAAM;gBACJ;gBACA,OAAO,WAAW;gBAClB;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA+B,GACxC;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,OAAO,OAAoB;IAC/C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,KAAK,aAAa,GAAG,CAAC;QAE5B,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgB,GACzB;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,aAAa,CAAC,MAAM,CAAC;YAChC,OAAO;gBAAE,IAAI,SAAS;YAAI;QAC5B;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA0B;IAChE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA+B,GACxC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}