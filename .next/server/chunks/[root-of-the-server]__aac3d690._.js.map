{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufmertyavuz/Desktop/nakliyeemm/src/app/api/arac-masraflari/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { arac_id, masraf_tipi_id, odeme_tutari, odeme_tarihi, aciklama } = body;\n\n    // Validasyon\n    if (!arac_id || !odeme_tutari || !odeme_tarihi) {\n      return NextResponse.json(\n        { error: 'Araç ID, ödeme tutarı ve ödeme tarihi zorunludur' },\n        { status: 400 }\n      );\n    }\n\n    // Araç masrafını veritabanına ekle\n    const yeniMasraf = await prisma.aracOdemeKayitlari.create({\n      data: {\n        arac_id: parseInt(arac_id),\n        masraf_tipi_id: masraf_tipi_id ? parseInt(masraf_tipi_id) : null,\n        odeme_tutari: parseFloat(odeme_tutari),\n        odeme_tarihi: new Date(odeme_tarihi),\n        aciklama: aciklama || null\n      },\n      include: {\n        arac: true\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      masraf: yeniMasraf\n    });\n\n  } catch (error) {\n    console.error('Araç masrafı ekleme hatası:', error);\n    return NextResponse.json(\n      { error: 'Araç masrafı eklenirken bir hata oluştu' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const aracId = searchParams.get('arac_id');\n\n    let whereClause: any = {};\n    if (aracId) {\n      whereClause.arac_id = parseInt(aracId);\n    }\n\n    const masraflar = await prisma.aracOdemeKayitlari.findMany({\n      where: whereClause,\n      include: {\n        arac: true\n      },\n      orderBy: {\n        odeme_tarihi: 'desc'\n      }\n    });\n\n    return NextResponse.json(masraflar);\n\n  } catch (error) {\n    console.error('Araç masrafları getirme hatası:', error);\n    return NextResponse.json(\n      { error: 'Araç masrafları getirilirken bir hata oluştu' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,OAAO,EAAE,cAAc,EAAE,YAAY,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG;QAE1E,aAAa;QACb,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,cAAc;YAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmD,GAC5D;gBAAE,QAAQ;YAAI;QAElB;QAEA,mCAAmC;QACnC,MAAM,aAAa,MAAM,OAAO,kBAAkB,CAAC,MAAM,CAAC;YACxD,MAAM;gBACJ,SAAS,SAAS;gBAClB,gBAAgB,iBAAiB,SAAS,kBAAkB;gBAC5D,cAAc,WAAW;gBACzB,cAAc,IAAI,KAAK;gBACvB,UAAU,YAAY;YACxB;YACA,SAAS;gBACP,MAAM;YACR;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,QAAQ;QACV;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA0C,GACnD;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;QAEhC,IAAI,cAAmB,CAAC;QACxB,IAAI,QAAQ;YACV,YAAY,OAAO,GAAG,SAAS;QACjC;QAEA,MAAM,YAAY,MAAM,OAAO,kBAAkB,CAAC,QAAQ,CAAC;YACzD,OAAO;YACP,SAAS;gBACP,MAAM;YACR;YACA,SAAS;gBACP,cAAc;YAChB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA+C,GACxD;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF","debugId":null}}]
}