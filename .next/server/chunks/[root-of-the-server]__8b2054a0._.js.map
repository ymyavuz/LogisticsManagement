{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufmertyavuz/Desktop/nakliyeemm/src/app/api/sirket-bilanco/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\n// Toplam fiyatı hesapla (MT * Birim Fiyat)\nconst hesaplaToplamFiyat = (sefer: any, birimFiyat: number): number => {\n  // YAP-İstanbul (sirket_id=2) için birim fiyat doğrudan toplam fiyat olarak kullanılır\n  if (sefer.sirket_id === 2) {\n    return birimFiyat;\n  }\n  \n  // Diğer şirketler için MT * Birim Fiyat formülü uygulanır\n  const mt = sefer.mt || 0;\n  return mt * birimFiyat;\n};\n\n// KDV hesapla (gelirin %20'si)\nconst hesaplaKDV = (gelir: number): number => {\n  return gelir * 0.20; // %20 KDV\n};\n\n// KDV dahil gelir hesapla\nconst hesaplaKDVDahilGelir = (sefer: any, birimFiyat: number): number => {\n  const temelGelir = hesaplaToplamFiyat(sefer, birimFiyat);\n  const kdv = hesaplaKDV(temelGelir);\n  return temelGelir + kdv;\n};\n\n// Tevkifat hesapla (KDV'nin %20'si, yani gelirin %4'ü)\nconst hesaplaTevkifat = (gelir: number): number => {\n  // KDV = gelirin %20'si, tevkifat = KDV'nin %20'si = gelirin %4'ü\n  return gelir * 0.04;\n};\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const sirketId = searchParams.get('sirket_id');\n    const ay = searchParams.get('ay');\n    const donem = searchParams.get('donem');\n\n    // Tüm şirketlerin araçlarını dinamik olarak çek\n    const tumSirketlerAraclar = await prisma.araclar.findMany({\n      select: { \n        arac_id: true,\n        sirket_id: true \n      }\n    });\n    \n    // Şirket bazında arac_id mapping'i oluştur\n    const sirketAracMapping: Record<number, number[]> = {};\n    tumSirketlerAraclar.forEach(arac => {\n      if (!sirketAracMapping[arac.sirket_id]) {\n        sirketAracMapping[arac.sirket_id] = [];\n      }\n      sirketAracMapping[arac.sirket_id].push(arac.arac_id);\n    });\n\n    // Eğer şirket ID yoksa, genel özet döndür\n    if (!sirketId) {\n      // Tüm şirketlerin genel özeti\n      const tumSirketler = await prisma.sirketler.findMany();\n      \n      // Filtreleme koşullarını oluştur\n      const whereClause: any = {};\n      if (ay) {\n        whereClause.ay = parseInt(ay);\n      }\n      if (donem) {\n        whereClause.donem = parseInt(donem);\n      }\n      \n      // Tüm seferler (filtrelenmiş)\n      const tumSeferler = await prisma.seferler.findMany({\n        where: whereClause,\n        include: {\n          sirket: true,\n          arac: true\n        }\n      });\n\n      // Bilanço hesaplamaları - KDV hariç gelir hesaplaması\n      const toplamGelir = tumSeferler.reduce((toplam, sefer) => {\n        const temelGelir = hesaplaToplamFiyat(sefer, sefer.sirketten_alinan_ucret);\n        return toplam + temelGelir;\n      }, 0);\n      \n      // KDV tutarını ayrı hesapla\n      const toplamKDV = tumSeferler.reduce((toplam, sefer) => {\n        const temelGelir = hesaplaToplamFiyat(sefer, sefer.sirketten_alinan_ucret);\n        const kdv = hesaplaKDV(temelGelir);\n        return toplam + kdv;\n      }, 0);\n      \n      const toplamGider = tumSeferler.reduce((toplam, sefer) => {\n        const toplamFiyat = hesaplaToplamFiyat(sefer, sefer.sofore_odenen_ucret);\n        return toplam + toplamFiyat;\n      }, 0);\n      \n      // Şöför giderlerine de %20 KDV ekle\n      const toplamSoforKDV = tumSeferler.reduce((toplam, sefer) => {\n        const gider = hesaplaToplamFiyat(sefer, sefer.sofore_odenen_ucret);\n        const soforKdv = hesaplaKDV(gider);\n        return toplam + soforKdv;\n      }, 0);\n      \n      // Tevkifat hesaplaması - sadece fatura fiyatı varsa hesapla\n      const toplamTevkifat = tumSeferler.reduce((toplam, sefer) => {\n        // Sadece fatura fiyatı varsa tevkifat hesapla\n        if (sefer.sofor_fatura_ucreti && sefer.sofor_fatura_ucreti > 0) {\n          // Tüm şirketler için standart tevkifat hesaplaması\n          const faturaToplamFiyat = hesaplaToplamFiyat(sefer, sefer.sofor_fatura_ucreti);\n          return toplam + hesaplaTevkifat(faturaToplamFiyat);\n        }\n        return toplam;\n      }, 0);\n      \n      const toplamGiderVeTevkifat = toplamGider + toplamSoforKDV + toplamTevkifat;\n      const netKar = (toplamGelir + toplamKDV) - toplamGiderVeTevkifat;\n\n      // Şirket bazında dağılım\n      const sirketBazindaVeriler = tumSirketler.map(sirket => {\n        // Gelir hesaplaması için tüm şirket seferlerini al (arac_id filtresi YOK)\n        const sirketTumSeferleri = tumSeferler.filter(sefer => sefer.sirket_id === sirket.sirket_id);\n        \n        // Gider hesaplaması için sadece şirketin araçlarındaki seferleri al (arac_id filtresi VAR)\n        const sirketAracIds = sirketAracMapping[sirket.sirket_id] || [];\n        const sirketGiderSeferleri = tumSeferler.filter(sefer => \n          sefer.sirket_id === sirket.sirket_id && \n          sefer.arac_id && \n          sirketAracIds.includes(sefer.arac_id)\n        );\n        \n        // Gelir hesaplamaları - Tüm seferler dahil\n        const sirketGelir = sirketTumSeferleri.reduce((toplam, sefer) => {\n          const temelGelir = hesaplaToplamFiyat(sefer, sefer.sirketten_alinan_ucret);\n          return toplam + temelGelir;\n        }, 0);\n        \n        // Şirket KDV tutarını ayrı hesapla\n        const sirketKDV = sirketTumSeferleri.reduce((toplam, sefer) => {\n          const temelGelir = hesaplaToplamFiyat(sefer, sefer.sirketten_alinan_ucret);\n          const kdv = hesaplaKDV(temelGelir);\n          return toplam + kdv;\n        }, 0);\n        \n        const sirketGider = sirketGiderSeferleri.reduce((toplam, sefer) => {\n          const toplamFiyat = hesaplaToplamFiyat(sefer, sefer.sofore_odenen_ucret);\n          return toplam + toplamFiyat;\n        }, 0);\n        \n        // Şirket şöför gider KDV'si\n        const sirketSoforKDV = sirketGiderSeferleri.reduce((toplam, sefer) => {\n          const gider = hesaplaToplamFiyat(sefer, sefer.sofore_odenen_ucret);\n          const soforKdv = hesaplaKDV(gider);\n          return toplam + soforKdv;\n        }, 0);\n\n        // Tüm şirketler için standart tevkifat hesaplaması\n        const sirketTevkifat = sirketTumSeferleri.reduce((toplam, sefer) => {\n          // Sadece fatura fiyatı varsa tevkifat hesapla\n          if (sefer.sofor_fatura_ucreti && sefer.sofor_fatura_ucreti > 0) {\n            const faturaToplamFiyat = hesaplaToplamFiyat(sefer, sefer.sofor_fatura_ucreti);\n            return toplam + hesaplaTevkifat(faturaToplamFiyat);\n          }\n          return toplam;\n        }, 0);\n\n        const sirketMT = sirketTumSeferleri.reduce((toplam, sefer) => {\n          return toplam + (sefer.mt || 0);\n        }, 0);\n\n        // Gider değerlerini hesapla - YAP-İstanbul için özel hesaplama\n        let sirketToplamGider = 0;\n        if (sirket.sirket_id === 2) {\n          // YAP-İstanbul için: Ham gider + (Ham gider/5) - (Ham gider/25)\n          const hamGider = sirketGider;\n          const kdvTutari = hamGider / 5; // %20 KDV\n          const tevkifatTutari = hamGider / 25; // %4 tevkifat\n          sirketToplamGider = hamGider + kdvTutari - tevkifatTutari;\n          \n          console.log(`YAP-İstanbul (${sirket.sirket_adi}) - Ham gider: ${hamGider}, KDV: ${kdvTutari}, Tevkifat düşüşü: ${tevkifatTutari}, Toplam gider: ${sirketToplamGider}`);\n        } else {\n          sirketToplamGider = sirketGider + sirketSoforKDV + sirketTevkifat;\n        }\n\n        return {\n          sirket_id: sirket.sirket_id,\n          sirket_adi: sirket.sirket_adi,\n          gelir: sirketGelir,\n          kdv: sirketKDV,\n          gider: sirketGider, \n          soforKdv: sirketSoforKDV,\n          tevkifat: sirketTevkifat,\n          toplamGider: sirketToplamGider,\n          netKar: (sirketGelir + sirketKDV) - sirketToplamGider,\n          seferSayisi: sirketTumSeferleri.length,\n          toplamMT: sirketMT,\n          ozelDurum: sirket.sirket_id === 2 ? 'Birim fiyat = Toplam fiyat' : 'MT × Birim fiyat'\n        };\n      });\n\n      // Aylık dağılım\n      const aylikVeriler = tumSeferler.reduce((acc: any, sefer) => {\n        const ay = sefer.ay || 0;\n        if (!acc[ay]) {\n          acc[ay] = {\n            ay,\n            gelir: 0,\n            kdv: 0,\n            gider: 0,\n            soforKdv: 0,\n            tevkifat: 0,\n            seferSayisi: 0,\n            toplamMT: 0\n          };\n        }\n        \n        // Gelir hesaplamaları - Tüm seferler dahil (arac_id filtresi YOK)\n        const temelGelir = hesaplaToplamFiyat(sefer, sefer.sirketten_alinan_ucret);\n        const kdv = hesaplaKDV(temelGelir);\n        \n        // Gider hesaplamaları - Sadece şirketin araçlarındaki seferler (arac_id filtresi VAR)\n        const sirketAracIds = sirketAracMapping[sefer.sirket_id] || [];\n        const seferAracDahilMi = sefer.arac_id && sirketAracIds.includes(sefer.arac_id);\n        \n        // Gelir her zaman dahil\n        acc[ay].gelir += temelGelir; // KDV hariç gelir\n        acc[ay].kdv += kdv;\n        acc[ay].seferSayisi += 1;\n        acc[ay].toplamMT += (sefer.mt || 0);\n        \n        // Gider sadece araç dahilse\n        if (seferAracDahilMi) {\n          const giderToplamFiyat = hesaplaToplamFiyat(sefer, sefer.sofore_odenen_ucret);\n          const soforKdv = hesaplaKDV(giderToplamFiyat);\n          \n          acc[ay].gider += giderToplamFiyat;\n          acc[ay].soforKdv += soforKdv;\n        }\n        \n        // Tevkifat hesapla - sadece fatura fiyatı varsa\n        let seferTevkifat = 0;\n        if (sefer.sofor_fatura_ucreti && sefer.sofor_fatura_ucreti > 0) {\n          const faturaToplamFiyat = hesaplaToplamFiyat(sefer, sefer.sofor_fatura_ucreti);\n          seferTevkifat = hesaplaTevkifat(faturaToplamFiyat);\n        }\n        acc[ay].tevkifat += seferTevkifat; // Her seferin tevkifatını ekle\n        \n        return acc;\n      }, {});\n\n      const aylikDagitim = Object.values(aylikVeriler).sort((a: any, b: any) => a.ay - b.ay);\n\n      // Tek şirket gösterildiğinde - sabit tevkifat değerlerini kaldırıyoruz\n      if (aylikDagitim.length > 0) {\n        // Artık sabit tevkifat değerleri kullanmıyoruz\n        // Tevkifat aylikVeriler içinde her ay için ayrı ayrı hesaplanıyor\n      }\n\n      const genelOzet = {\n        genel: true,\n        gelirGider: {\n          toplamGelir,\n          toplamKDV,\n          toplamGider,\n          toplamSoforKDV,\n          toplamTevkifat,\n          toplamGiderVeTevkifat,\n          netKar,\n          karMarji: (toplamGelir + toplamKDV) > 0 ? ((netKar / (toplamGelir + toplamKDV)) * 100).toFixed(2) : '0'\n        },\n        seferler: {\n          toplamSeferSayisi: tumSeferler.length,\n          aylikDagitim\n        },\n        sirketler: {\n          toplamSirketSayisi: tumSirketler.length,\n          sirketBazindaVeriler\n        },\n        filtrelemeBilgileri: {\n          ay: ay ? parseInt(ay) : null,\n          donem: donem ? parseInt(donem) : null\n        },\n        hesaplamaNotlari: {\n          genel: 'Hesaplamalar MT × Birim Fiyat formülü ile yapılmıştır',\n          yapIstanbulOzel: 'YAP-İstanbul (ID: 2) için birim fiyat = toplam fiyat olarak hesaplanmıştır',\n          tevkifat: 'Tevkifat gideri sadece şöför fatura fiyatı girilmiş seferler için hesaplanır (%4)',\n          kdv: 'Şirket gelirlerine ve şöför giderlerine %20 KDV dahil edilmiştir'\n        }\n      };\n\n      return NextResponse.json(genelOzet);\n    }\n\n    // Şirket ID varsa, önceki mantığı kullan\n    const sirket = await prisma.sirketler.findUnique({\n      where: { sirket_id: parseInt(sirketId) }\n    });\n\n    if (!sirket) {\n      return NextResponse.json({ error: 'Şirket bulunamadı' }, { status: 404 });\n    }\n\n    // Sefer verilerini filtrele\n    const whereClause: any = {\n      sirket_id: parseInt(sirketId)\n    };\n\n    if (ay) {\n      whereClause.ay = parseInt(ay);\n    }\n\n    if (donem) {\n      whereClause.donem = parseInt(donem);\n    }\n\n    // Seferler verilerini al\n    const seferler = await prisma.seferler.findMany({\n      where: whereClause,\n      include: {\n        arac: true\n      }\n    });\n\n    // Gider hesaplaması için araç filtresi uygula\n    const sirketAracIds = sirketAracMapping[parseInt(sirketId)] || [];\n    const giderSeferleri = seferler.filter(sefer => \n      sefer.arac_id && sirketAracIds.includes(sefer.arac_id)\n    );\n\n    // Bilanço hesaplamaları - Gelir tüm seferlerden, gider sadece araç dahilinden\n    const toplamGelir = seferler.reduce((toplam, sefer) => {\n      const temelGelir = hesaplaToplamFiyat(sefer, sefer.sirketten_alinan_ucret);\n      return toplam + temelGelir;\n    }, 0);\n    \n    // KDV tutarını ayrı hesapla\n    const toplamKDV = seferler.reduce((toplam, sefer) => {\n      const temelGelir = hesaplaToplamFiyat(sefer, sefer.sirketten_alinan_ucret);\n      const kdv = hesaplaKDV(temelGelir);\n      return toplam + kdv;\n    }, 0);\n    \n    const toplamGider = giderSeferleri.reduce((toplam, sefer) => {\n      const toplamFiyat = hesaplaToplamFiyat(sefer, sefer.sofore_odenen_ucret);\n      return toplam + toplamFiyat;\n    }, 0);\n    \n    // Şöför giderlerine de %20 KDV ekle\n    const toplamSoforKDV = giderSeferleri.reduce((toplam, sefer) => {\n      const gider = hesaplaToplamFiyat(sefer, sefer.sofore_odenen_ucret);\n      const soforKdv = hesaplaKDV(gider);\n      return toplam + soforKdv;\n    }, 0);\n    \n    // Tevkifat hesaplaması - sadece fatura fiyatı varsa hesapla\n    const toplamTevkifat = seferler.reduce((toplam, sefer) => {\n      // Sadece fatura fiyatı varsa tevkifat hesapla\n      if (sefer.sofor_fatura_ucreti && sefer.sofor_fatura_ucreti > 0) {\n        // Tüm şirketler için standart tevkifat hesaplaması\n        const faturaToplamFiyat = hesaplaToplamFiyat(sefer, sefer.sofor_fatura_ucreti);\n        return toplam + hesaplaTevkifat(faturaToplamFiyat);\n      }\n      return toplam;\n    }, 0);\n    \n    const toplamGiderVeTevkifat = toplamGider + toplamSoforKDV + toplamTevkifat;\n    const netKar = (toplamGelir + toplamKDV) - toplamGiderVeTevkifat;\n\n    // Aylık dağılım\n    const aylikVeriler = seferler.reduce((acc: any, sefer) => {\n      const ay = sefer.ay || 0;\n      if (!acc[ay]) {\n        acc[ay] = {\n          ay,\n          gelir: 0,\n          kdv: 0,\n          gider: 0,\n          soforKdv: 0,\n          tevkifat: 0,\n          seferSayisi: 0,\n          toplamMT: 0\n        };\n      }\n      \n      // Gelir hesaplamaları - Tüm seferler dahil (arac_id filtresi YOK)\n      const temelGelir = hesaplaToplamFiyat(sefer, sefer.sirketten_alinan_ucret);\n      const kdv = hesaplaKDV(temelGelir);\n      \n      // Gider hesaplamaları - Sadece şirketin araçlarındaki seferler (arac_id filtresi VAR)\n      const sirketAracIds = sirketAracMapping[sefer.sirket_id] || [];\n      const seferAracDahilMi = sefer.arac_id && sirketAracIds.includes(sefer.arac_id);\n      \n      // Gelir her zaman dahil\n      acc[ay].gelir += temelGelir; // KDV hariç gelir\n      acc[ay].kdv += kdv;\n      acc[ay].seferSayisi += 1;\n      acc[ay].toplamMT += (sefer.mt || 0);\n      \n      // Gider sadece araç dahilse\n      if (seferAracDahilMi) {\n        const giderToplamFiyat = hesaplaToplamFiyat(sefer, sefer.sofore_odenen_ucret);\n        const soforKdv = hesaplaKDV(giderToplamFiyat);\n        \n        acc[ay].gider += giderToplamFiyat;\n        acc[ay].soforKdv += soforKdv;\n      }\n      \n      // Tevkifat hesapla - sadece fatura fiyatı varsa\n      let seferTevkifat = 0;\n      if (sefer.sofor_fatura_ucreti && sefer.sofor_fatura_ucreti > 0) {\n        const faturaToplamFiyat = hesaplaToplamFiyat(sefer, sefer.sofor_fatura_ucreti);\n        seferTevkifat = hesaplaTevkifat(faturaToplamFiyat);\n      }\n      acc[ay].tevkifat += seferTevkifat; // Her seferin tevkifatını ekle\n      \n      return acc;\n    }, {});\n\n    const aylikDagitim = Object.values(aylikVeriler).sort((a: any, b: any) => a.ay - b.ay);\n\n    // Tek şirket gösterildiğinde - sabit tevkifat değerlerini kaldırıyoruz\n    if (aylikDagitim.length > 0) {\n      // Artık sabit tevkifat değerleri kullanmıyoruz\n      // Tevkifat aylikVeriler içinde her ay için ayrı ayrı hesaplanıyor\n    }\n\n    const bilanco = {\n      genel: false,\n      sirket: {\n        sirket_adi: sirket.sirket_adi,\n        vergi_numarasi: sirket.vergi_numarasi,\n        ozelDurum: parseInt(sirketId) === 2 ? 'Birim fiyat = Toplam fiyat' : 'MT × Birim fiyat'\n      },\n      gelirGider: {\n        toplamGelir,\n        toplamKDV,\n        toplamGider,\n        toplamSoforKDV,\n        toplamTevkifat,\n        toplamGiderVeTevkifat,\n        netKar,\n        karMarji: (toplamGelir + toplamKDV) > 0 ? ((netKar / (toplamGelir + toplamKDV)) * 100).toFixed(2) : '0'\n      },\n      seferler: {\n        toplamSeferSayisi: seferler.length,\n        aylikDagitim,\n        seferDetaylari: await Promise.all(seferler.map(async (sefer) => {\n          // Fiyat listesinden eşleşen tahliye yerini bul\n          let fiyatListesiTahliyeYeri = null;\n          try {\n            // Önce tam eşleşme deneyelim\n            let fiyatListesi = await prisma.sirketFiyatListesi.findFirst({\n              where: {\n                sirket_id: parseInt(sirketId),\n                ucret: sefer.sirketten_alinan_ucret\n              }\n            });\n            \n            // Eğer bulamazsak, sayısal karşılaştırma yapalım (ondalık fark olabilir)\n            if (!fiyatListesi) {\n              fiyatListesi = await prisma.sirketFiyatListesi.findFirst({\n                where: {\n                  sirket_id: parseInt(sirketId),\n                  ucret: {\n                    gte: sefer.sirketten_alinan_ucret - 0.01,\n                    lte: sefer.sirketten_alinan_ucret + 0.01\n                  }\n                }\n              });\n            }\n            \n            fiyatListesiTahliyeYeri = fiyatListesi?.tahliye_yeri || null;\n            \n            // Debug için log ekleyelim\n            if (!fiyatListesi) {\n              console.log(`Fiyat listesinde bulunamadı - Şirket ID: ${sirketId}, Ücret: ${sefer.sirketten_alinan_ucret}`);\n            }\n          } catch (error) {\n            console.log('Fiyat listesi sorgusu hatası:', error);\n          }\n\n          return {\n            sefer_id: sefer.sefer_id,\n            sira_no: sefer.sira_no,\n            mt: sefer.mt,\n            birimFiyatGelir: sefer.sirketten_alinan_ucret,\n            birimFiyatGider: sefer.sofore_odenen_ucret,\n            toplamFiyatGelir: hesaplaKDVDahilGelir(sefer, sefer.sirketten_alinan_ucret),\n            toplamFiyatGider: hesaplaToplamFiyat(sefer, sefer.sofore_odenen_ucret),\n            tahliye_yeri: sefer.tahliye_yeri,\n            arac_tipi: sefer.arac_tipi,\n            fiyatListesiTahliyeYeri: fiyatListesiTahliyeYeri\n          };\n        }))\n      },\n      filtrelemeBilgileri: {\n        ay: ay ? parseInt(ay) : null,\n        donem: donem ? parseInt(donem) : null\n      },\n      hesaplamaNotlari: {\n        formul: parseInt(sirketId) === 2 ? 'Bu şirket için birim fiyat = toplam fiyat' : 'Toplam fiyat = MT × Birim fiyat',\n        aciklama: parseInt(sirketId) === 2 ? 'YAP-İstanbul için özel hesaplama uygulanmıştır' : 'Standart MT × Birim fiyat hesaplaması uygulanmıştır',\n        kdv: 'Şirket gelirlerine ve şöför giderlerine %20 KDV dahil edilmiştir'\n      }\n    };\n\n    return NextResponse.json(bilanco);\n\n  } catch (error) {\n    console.error('Şirket bilanço verisi alınırken hata:', error);\n    return NextResponse.json(\n      { error: 'Bilanço verisi alınırken bir hata oluştu' },\n      { status: 500 }\n    );\n  } finally {\n    await prisma.$disconnect();\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAE/B,2CAA2C;AAC3C,MAAM,qBAAqB,CAAC,OAAY;IACtC,sFAAsF;IACtF,IAAI,MAAM,SAAS,KAAK,GAAG;QACzB,OAAO;IACT;IAEA,0DAA0D;IAC1D,MAAM,KAAK,MAAM,EAAE,IAAI;IACvB,OAAO,KAAK;AACd;AAEA,+BAA+B;AAC/B,MAAM,aAAa,CAAC;IAClB,OAAO,QAAQ,MAAM,UAAU;AACjC;AAEA,0BAA0B;AAC1B,MAAM,uBAAuB,CAAC,OAAY;IACxC,MAAM,aAAa,mBAAmB,OAAO;IAC7C,MAAM,MAAM,WAAW;IACvB,OAAO,aAAa;AACtB;AAEA,uDAAuD;AACvD,MAAM,kBAAkB,CAAC;IACvB,iEAAiE;IACjE,OAAO,QAAQ;AACjB;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,WAAW,aAAa,GAAG,CAAC;QAClC,MAAM,KAAK,aAAa,GAAG,CAAC;QAC5B,MAAM,QAAQ,aAAa,GAAG,CAAC;QAE/B,gDAAgD;QAChD,MAAM,sBAAsB,MAAM,OAAO,OAAO,CAAC,QAAQ,CAAC;YACxD,QAAQ;gBACN,SAAS;gBACT,WAAW;YACb;QACF;QAEA,2CAA2C;QAC3C,MAAM,oBAA8C,CAAC;QACrD,oBAAoB,OAAO,CAAC,CAAA;YAC1B,IAAI,CAAC,iBAAiB,CAAC,KAAK,SAAS,CAAC,EAAE;gBACtC,iBAAiB,CAAC,KAAK,SAAS,CAAC,GAAG,EAAE;YACxC;YACA,iBAAiB,CAAC,KAAK,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,OAAO;QACrD;QAEA,0CAA0C;QAC1C,IAAI,CAAC,UAAU;YACb,8BAA8B;YAC9B,MAAM,eAAe,MAAM,OAAO,SAAS,CAAC,QAAQ;YAEpD,iCAAiC;YACjC,MAAM,cAAmB,CAAC;YAC1B,IAAI,IAAI;gBACN,YAAY,EAAE,GAAG,SAAS;YAC5B;YACA,IAAI,OAAO;gBACT,YAAY,KAAK,GAAG,SAAS;YAC/B;YAEA,8BAA8B;YAC9B,MAAM,cAAc,MAAM,OAAO,QAAQ,CAAC,QAAQ,CAAC;gBACjD,OAAO;gBACP,SAAS;oBACP,QAAQ;oBACR,MAAM;gBACR;YACF;YAEA,sDAAsD;YACtD,MAAM,cAAc,YAAY,MAAM,CAAC,CAAC,QAAQ;gBAC9C,MAAM,aAAa,mBAAmB,OAAO,MAAM,sBAAsB;gBACzE,OAAO,SAAS;YAClB,GAAG;YAEH,4BAA4B;YAC5B,MAAM,YAAY,YAAY,MAAM,CAAC,CAAC,QAAQ;gBAC5C,MAAM,aAAa,mBAAmB,OAAO,MAAM,sBAAsB;gBACzE,MAAM,MAAM,WAAW;gBACvB,OAAO,SAAS;YAClB,GAAG;YAEH,MAAM,cAAc,YAAY,MAAM,CAAC,CAAC,QAAQ;gBAC9C,MAAM,cAAc,mBAAmB,OAAO,MAAM,mBAAmB;gBACvE,OAAO,SAAS;YAClB,GAAG;YAEH,oCAAoC;YACpC,MAAM,iBAAiB,YAAY,MAAM,CAAC,CAAC,QAAQ;gBACjD,MAAM,QAAQ,mBAAmB,OAAO,MAAM,mBAAmB;gBACjE,MAAM,WAAW,WAAW;gBAC5B,OAAO,SAAS;YAClB,GAAG;YAEH,4DAA4D;YAC5D,MAAM,iBAAiB,YAAY,MAAM,CAAC,CAAC,QAAQ;gBACjD,8CAA8C;gBAC9C,IAAI,MAAM,mBAAmB,IAAI,MAAM,mBAAmB,GAAG,GAAG;oBAC9D,mDAAmD;oBACnD,MAAM,oBAAoB,mBAAmB,OAAO,MAAM,mBAAmB;oBAC7E,OAAO,SAAS,gBAAgB;gBAClC;gBACA,OAAO;YACT,GAAG;YAEH,MAAM,wBAAwB,cAAc,iBAAiB;YAC7D,MAAM,SAAS,AAAC,cAAc,YAAa;YAE3C,yBAAyB;YACzB,MAAM,uBAAuB,aAAa,GAAG,CAAC,CAAA;gBAC5C,0EAA0E;gBAC1E,MAAM,qBAAqB,YAAY,MAAM,CAAC,CAAA,QAAS,MAAM,SAAS,KAAK,OAAO,SAAS;gBAE3F,2FAA2F;gBAC3F,MAAM,gBAAgB,iBAAiB,CAAC,OAAO,SAAS,CAAC,IAAI,EAAE;gBAC/D,MAAM,uBAAuB,YAAY,MAAM,CAAC,CAAA,QAC9C,MAAM,SAAS,KAAK,OAAO,SAAS,IACpC,MAAM,OAAO,IACb,cAAc,QAAQ,CAAC,MAAM,OAAO;gBAGtC,2CAA2C;gBAC3C,MAAM,cAAc,mBAAmB,MAAM,CAAC,CAAC,QAAQ;oBACrD,MAAM,aAAa,mBAAmB,OAAO,MAAM,sBAAsB;oBACzE,OAAO,SAAS;gBAClB,GAAG;gBAEH,mCAAmC;gBACnC,MAAM,YAAY,mBAAmB,MAAM,CAAC,CAAC,QAAQ;oBACnD,MAAM,aAAa,mBAAmB,OAAO,MAAM,sBAAsB;oBACzE,MAAM,MAAM,WAAW;oBACvB,OAAO,SAAS;gBAClB,GAAG;gBAEH,MAAM,cAAc,qBAAqB,MAAM,CAAC,CAAC,QAAQ;oBACvD,MAAM,cAAc,mBAAmB,OAAO,MAAM,mBAAmB;oBACvE,OAAO,SAAS;gBAClB,GAAG;gBAEH,4BAA4B;gBAC5B,MAAM,iBAAiB,qBAAqB,MAAM,CAAC,CAAC,QAAQ;oBAC1D,MAAM,QAAQ,mBAAmB,OAAO,MAAM,mBAAmB;oBACjE,MAAM,WAAW,WAAW;oBAC5B,OAAO,SAAS;gBAClB,GAAG;gBAEH,mDAAmD;gBACnD,MAAM,iBAAiB,mBAAmB,MAAM,CAAC,CAAC,QAAQ;oBACxD,8CAA8C;oBAC9C,IAAI,MAAM,mBAAmB,IAAI,MAAM,mBAAmB,GAAG,GAAG;wBAC9D,MAAM,oBAAoB,mBAAmB,OAAO,MAAM,mBAAmB;wBAC7E,OAAO,SAAS,gBAAgB;oBAClC;oBACA,OAAO;gBACT,GAAG;gBAEH,MAAM,WAAW,mBAAmB,MAAM,CAAC,CAAC,QAAQ;oBAClD,OAAO,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC;gBAChC,GAAG;gBAEH,+DAA+D;gBAC/D,IAAI,oBAAoB;gBACxB,IAAI,OAAO,SAAS,KAAK,GAAG;oBAC1B,gEAAgE;oBAChE,MAAM,WAAW;oBACjB,MAAM,YAAY,WAAW,GAAG,UAAU;oBAC1C,MAAM,iBAAiB,WAAW,IAAI,cAAc;oBACpD,oBAAoB,WAAW,YAAY;oBAE3C,QAAQ,GAAG,CAAC,CAAC,cAAc,EAAE,OAAO,UAAU,CAAC,eAAe,EAAE,SAAS,OAAO,EAAE,UAAU,mBAAmB,EAAE,eAAe,gBAAgB,EAAE,mBAAmB;gBACvK,OAAO;oBACL,oBAAoB,cAAc,iBAAiB;gBACrD;gBAEA,OAAO;oBACL,WAAW,OAAO,SAAS;oBAC3B,YAAY,OAAO,UAAU;oBAC7B,OAAO;oBACP,KAAK;oBACL,OAAO;oBACP,UAAU;oBACV,UAAU;oBACV,aAAa;oBACb,QAAQ,AAAC,cAAc,YAAa;oBACpC,aAAa,mBAAmB,MAAM;oBACtC,UAAU;oBACV,WAAW,OAAO,SAAS,KAAK,IAAI,+BAA+B;gBACrE;YACF;YAEA,gBAAgB;YAChB,MAAM,eAAe,YAAY,MAAM,CAAC,CAAC,KAAU;gBACjD,MAAM,KAAK,MAAM,EAAE,IAAI;gBACvB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE;oBACZ,GAAG,CAAC,GAAG,GAAG;wBACR;wBACA,OAAO;wBACP,KAAK;wBACL,OAAO;wBACP,UAAU;wBACV,UAAU;wBACV,aAAa;wBACb,UAAU;oBACZ;gBACF;gBAEA,kEAAkE;gBAClE,MAAM,aAAa,mBAAmB,OAAO,MAAM,sBAAsB;gBACzE,MAAM,MAAM,WAAW;gBAEvB,sFAAsF;gBACtF,MAAM,gBAAgB,iBAAiB,CAAC,MAAM,SAAS,CAAC,IAAI,EAAE;gBAC9D,MAAM,mBAAmB,MAAM,OAAO,IAAI,cAAc,QAAQ,CAAC,MAAM,OAAO;gBAE9E,wBAAwB;gBACxB,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,YAAY,kBAAkB;gBAC/C,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI;gBACf,GAAG,CAAC,GAAG,CAAC,WAAW,IAAI;gBACvB,GAAG,CAAC,GAAG,CAAC,QAAQ,IAAK,MAAM,EAAE,IAAI;gBAEjC,4BAA4B;gBAC5B,IAAI,kBAAkB;oBACpB,MAAM,mBAAmB,mBAAmB,OAAO,MAAM,mBAAmB;oBAC5E,MAAM,WAAW,WAAW;oBAE5B,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI;oBACjB,GAAG,CAAC,GAAG,CAAC,QAAQ,IAAI;gBACtB;gBAEA,gDAAgD;gBAChD,IAAI,gBAAgB;gBACpB,IAAI,MAAM,mBAAmB,IAAI,MAAM,mBAAmB,GAAG,GAAG;oBAC9D,MAAM,oBAAoB,mBAAmB,OAAO,MAAM,mBAAmB;oBAC7E,gBAAgB,gBAAgB;gBAClC;gBACA,GAAG,CAAC,GAAG,CAAC,QAAQ,IAAI,eAAe,+BAA+B;gBAElE,OAAO;YACT,GAAG,CAAC;YAEJ,MAAM,eAAe,OAAO,MAAM,CAAC,cAAc,IAAI,CAAC,CAAC,GAAQ,IAAW,EAAE,EAAE,GAAG,EAAE,EAAE;YAErF,uEAAuE;YACvE,IAAI,aAAa,MAAM,GAAG,GAAG;YAC3B,+CAA+C;YAC/C,kEAAkE;YACpE;YAEA,MAAM,YAAY;gBAChB,OAAO;gBACP,YAAY;oBACV;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA,UAAU,AAAC,cAAc,YAAa,IAAI,CAAC,AAAC,SAAS,CAAC,cAAc,SAAS,IAAK,GAAG,EAAE,OAAO,CAAC,KAAK;gBACtG;gBACA,UAAU;oBACR,mBAAmB,YAAY,MAAM;oBACrC;gBACF;gBACA,WAAW;oBACT,oBAAoB,aAAa,MAAM;oBACvC;gBACF;gBACA,qBAAqB;oBACnB,IAAI,KAAK,SAAS,MAAM;oBACxB,OAAO,QAAQ,SAAS,SAAS;gBACnC;gBACA,kBAAkB;oBAChB,OAAO;oBACP,iBAAiB;oBACjB,UAAU;oBACV,KAAK;gBACP;YACF;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAC3B;QAEA,yCAAyC;QACzC,MAAM,SAAS,MAAM,OAAO,SAAS,CAAC,UAAU,CAAC;YAC/C,OAAO;gBAAE,WAAW,SAAS;YAAU;QACzC;QAEA,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,4BAA4B;QAC5B,MAAM,cAAmB;YACvB,WAAW,SAAS;QACtB;QAEA,IAAI,IAAI;YACN,YAAY,EAAE,GAAG,SAAS;QAC5B;QAEA,IAAI,OAAO;YACT,YAAY,KAAK,GAAG,SAAS;QAC/B;QAEA,yBAAyB;QACzB,MAAM,WAAW,MAAM,OAAO,QAAQ,CAAC,QAAQ,CAAC;YAC9C,OAAO;YACP,SAAS;gBACP,MAAM;YACR;QACF;QAEA,8CAA8C;QAC9C,MAAM,gBAAgB,iBAAiB,CAAC,SAAS,UAAU,IAAI,EAAE;QACjE,MAAM,iBAAiB,SAAS,MAAM,CAAC,CAAA,QACrC,MAAM,OAAO,IAAI,cAAc,QAAQ,CAAC,MAAM,OAAO;QAGvD,8EAA8E;QAC9E,MAAM,cAAc,SAAS,MAAM,CAAC,CAAC,QAAQ;YAC3C,MAAM,aAAa,mBAAmB,OAAO,MAAM,sBAAsB;YACzE,OAAO,SAAS;QAClB,GAAG;QAEH,4BAA4B;QAC5B,MAAM,YAAY,SAAS,MAAM,CAAC,CAAC,QAAQ;YACzC,MAAM,aAAa,mBAAmB,OAAO,MAAM,sBAAsB;YACzE,MAAM,MAAM,WAAW;YACvB,OAAO,SAAS;QAClB,GAAG;QAEH,MAAM,cAAc,eAAe,MAAM,CAAC,CAAC,QAAQ;YACjD,MAAM,cAAc,mBAAmB,OAAO,MAAM,mBAAmB;YACvE,OAAO,SAAS;QAClB,GAAG;QAEH,oCAAoC;QACpC,MAAM,iBAAiB,eAAe,MAAM,CAAC,CAAC,QAAQ;YACpD,MAAM,QAAQ,mBAAmB,OAAO,MAAM,mBAAmB;YACjE,MAAM,WAAW,WAAW;YAC5B,OAAO,SAAS;QAClB,GAAG;QAEH,4DAA4D;QAC5D,MAAM,iBAAiB,SAAS,MAAM,CAAC,CAAC,QAAQ;YAC9C,8CAA8C;YAC9C,IAAI,MAAM,mBAAmB,IAAI,MAAM,mBAAmB,GAAG,GAAG;gBAC9D,mDAAmD;gBACnD,MAAM,oBAAoB,mBAAmB,OAAO,MAAM,mBAAmB;gBAC7E,OAAO,SAAS,gBAAgB;YAClC;YACA,OAAO;QACT,GAAG;QAEH,MAAM,wBAAwB,cAAc,iBAAiB;QAC7D,MAAM,SAAS,AAAC,cAAc,YAAa;QAE3C,gBAAgB;QAChB,MAAM,eAAe,SAAS,MAAM,CAAC,CAAC,KAAU;YAC9C,MAAM,KAAK,MAAM,EAAE,IAAI;YACvB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE;gBACZ,GAAG,CAAC,GAAG,GAAG;oBACR;oBACA,OAAO;oBACP,KAAK;oBACL,OAAO;oBACP,UAAU;oBACV,UAAU;oBACV,aAAa;oBACb,UAAU;gBACZ;YACF;YAEA,kEAAkE;YAClE,MAAM,aAAa,mBAAmB,OAAO,MAAM,sBAAsB;YACzE,MAAM,MAAM,WAAW;YAEvB,sFAAsF;YACtF,MAAM,gBAAgB,iBAAiB,CAAC,MAAM,SAAS,CAAC,IAAI,EAAE;YAC9D,MAAM,mBAAmB,MAAM,OAAO,IAAI,cAAc,QAAQ,CAAC,MAAM,OAAO;YAE9E,wBAAwB;YACxB,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,YAAY,kBAAkB;YAC/C,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI;YACf,GAAG,CAAC,GAAG,CAAC,WAAW,IAAI;YACvB,GAAG,CAAC,GAAG,CAAC,QAAQ,IAAK,MAAM,EAAE,IAAI;YAEjC,4BAA4B;YAC5B,IAAI,kBAAkB;gBACpB,MAAM,mBAAmB,mBAAmB,OAAO,MAAM,mBAAmB;gBAC5E,MAAM,WAAW,WAAW;gBAE5B,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI;gBACjB,GAAG,CAAC,GAAG,CAAC,QAAQ,IAAI;YACtB;YAEA,gDAAgD;YAChD,IAAI,gBAAgB;YACpB,IAAI,MAAM,mBAAmB,IAAI,MAAM,mBAAmB,GAAG,GAAG;gBAC9D,MAAM,oBAAoB,mBAAmB,OAAO,MAAM,mBAAmB;gBAC7E,gBAAgB,gBAAgB;YAClC;YACA,GAAG,CAAC,GAAG,CAAC,QAAQ,IAAI,eAAe,+BAA+B;YAElE,OAAO;QACT,GAAG,CAAC;QAEJ,MAAM,eAAe,OAAO,MAAM,CAAC,cAAc,IAAI,CAAC,CAAC,GAAQ,IAAW,EAAE,EAAE,GAAG,EAAE,EAAE;QAErF,uEAAuE;QACvE,IAAI,aAAa,MAAM,GAAG,GAAG;QAC3B,+CAA+C;QAC/C,kEAAkE;QACpE;QAEA,MAAM,UAAU;YACd,OAAO;YACP,QAAQ;gBACN,YAAY,OAAO,UAAU;gBAC7B,gBAAgB,OAAO,cAAc;gBACrC,WAAW,SAAS,cAAc,IAAI,+BAA+B;YACvE;YACA,YAAY;gBACV;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA,UAAU,AAAC,cAAc,YAAa,IAAI,CAAC,AAAC,SAAS,CAAC,cAAc,SAAS,IAAK,GAAG,EAAE,OAAO,CAAC,KAAK;YACtG;YACA,UAAU;gBACR,mBAAmB,SAAS,MAAM;gBAClC;gBACA,gBAAgB,MAAM,QAAQ,GAAG,CAAC,SAAS,GAAG,CAAC,OAAO;oBACpD,+CAA+C;oBAC/C,IAAI,0BAA0B;oBAC9B,IAAI;wBACF,6BAA6B;wBAC7B,IAAI,eAAe,MAAM,OAAO,kBAAkB,CAAC,SAAS,CAAC;4BAC3D,OAAO;gCACL,WAAW,SAAS;gCACpB,OAAO,MAAM,sBAAsB;4BACrC;wBACF;wBAEA,yEAAyE;wBACzE,IAAI,CAAC,cAAc;4BACjB,eAAe,MAAM,OAAO,kBAAkB,CAAC,SAAS,CAAC;gCACvD,OAAO;oCACL,WAAW,SAAS;oCACpB,OAAO;wCACL,KAAK,MAAM,sBAAsB,GAAG;wCACpC,KAAK,MAAM,sBAAsB,GAAG;oCACtC;gCACF;4BACF;wBACF;wBAEA,0BAA0B,cAAc,gBAAgB;wBAExD,2BAA2B;wBAC3B,IAAI,CAAC,cAAc;4BACjB,QAAQ,GAAG,CAAC,CAAC,yCAAyC,EAAE,SAAS,SAAS,EAAE,MAAM,sBAAsB,EAAE;wBAC5G;oBACF,EAAE,OAAO,OAAO;wBACd,QAAQ,GAAG,CAAC,iCAAiC;oBAC/C;oBAEA,OAAO;wBACL,UAAU,MAAM,QAAQ;wBACxB,SAAS,MAAM,OAAO;wBACtB,IAAI,MAAM,EAAE;wBACZ,iBAAiB,MAAM,sBAAsB;wBAC7C,iBAAiB,MAAM,mBAAmB;wBAC1C,kBAAkB,qBAAqB,OAAO,MAAM,sBAAsB;wBAC1E,kBAAkB,mBAAmB,OAAO,MAAM,mBAAmB;wBACrE,cAAc,MAAM,YAAY;wBAChC,WAAW,MAAM,SAAS;wBAC1B,yBAAyB;oBAC3B;gBACF;YACF;YACA,qBAAqB;gBACnB,IAAI,KAAK,SAAS,MAAM;gBACxB,OAAO,QAAQ,SAAS,SAAS;YACnC;YACA,kBAAkB;gBAChB,QAAQ,SAAS,cAAc,IAAI,8CAA8C;gBACjF,UAAU,SAAS,cAAc,IAAI,mDAAmD;gBACxF,KAAK;YACP;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yCAAyC;QACvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2C,GACpD;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,MAAM,OAAO,WAAW;IAC1B;AACF","debugId":null}}]
}