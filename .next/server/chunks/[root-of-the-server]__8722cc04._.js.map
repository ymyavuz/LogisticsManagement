{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/yusufmertyavuz/Desktop/nakliyeemm/src/app/api/eski-veri-yukle/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport async function POST(request: Request) {\n  try {\n    const { ay, donem, seferler } = await request.json();\n    \n    console.log('Eski veri yükleme isteği:', { ay, donem, seferSayisi: Object.keys(seferler).length });\n    \n    // Parametreleri kontrol et\n    if (!ay || !donem) {\n      return NextResponse.json({\n        error: 'Ay ve dönem bilgileri gereklidir'\n      }, { status: 400 });\n    }\n    \n    if (!seferler || Object.keys(seferler).length === 0) {\n      return NextResponse.json({\n        error: 'Kaydedilecek sefer verisi bulunamadı'\n      }, { status: 400 });\n    }\n    \n    let kaydedilenSeferSayisi = 0;\n    const hatalar: string[] = [];\n    \n    // Her şirket için\n    for (const [sirketIdStr, sirketSeferleri] of Object.entries(seferler)) {\n      const sirketId = parseInt(sirketIdStr, 10);\n      \n      console.log(`Şirket ${sirketId} için sefer sayısı:`, Array.isArray(sirketSeferleri) ? sirketSeferleri.length : 'Dizi değil');\n      \n      if (!Array.isArray(sirketSeferleri)) {\n        console.error(`Şirket ID ${sirketId} için geçersiz veri formatı:`, sirketSeferleri);\n        continue;\n      }\n      \n      // Her sefer için\n      for (const sefer of sirketSeferleri) {\n        try {\n          const seferNo = parseInt(sefer.seferNo, 10) || 0;\n          \n          console.log(`Sefer işleniyor: Şirket ${sirketId}, Sefer ${seferNo}`, \n                     sefer.tumVeriler ? 'Veri mevcut' : 'Veri yok');\n          \n          // Şöför adına göre araç ID'sini bul\n          let aracId = null;\n          const soforAdi = getExcelValue(sefer, 'Şöför');\n          \n          if (soforAdi && soforAdi.trim() !== '') {\n            console.log(`Şöför adı bulundu: \"${soforAdi}\"`);\n            \n            // Önce tüm araçları getirip debug için logla\n            try {\n              const allAraclar = await prisma.araclar.findMany({\n                where: {\n                  sirket_id: sirketId\n                },\n                select: {\n                  arac_id: true,\n                  sofor_adi: true\n                }\n              });\n              \n              console.log(`Şirket ${sirketId} için tüm şöförler:`, \n                         allAraclar.map(a => `ID: ${a.arac_id}, Ad: ${a.sofor_adi}`).join(', '));\n              \n              // Önce birebir eşleşme ara (case insensitive)\n              const exactMatch = allAraclar.find(\n                a => a.sofor_adi.toLowerCase().trim() === soforAdi.toLowerCase().trim()\n              );\n              \n              if (exactMatch) {\n                aracId = exactMatch.arac_id;\n                console.log(`Tam eşleşme bulundu: \"${soforAdi}\" -> Araç ID: ${aracId}`);\n              }\n            } catch (e) {\n              console.error('Araçları getirirken hata:', e);\n            }\n\n            // Tam eşleşme bulunamadıysa, şöför adından ID çıkarmayı dene\n            if (!aracId) {\n            // Önce şöför adından araç ID'sini çıkarmayı dene\n            // Örnek formatlar: \"Ahmet (12)\", \"Mehmet - 5\", \"Ali ID:3\", \"Ayşe [7]\", \"Hasan #9\"\n            const idPattern = /[\\(\\[\\{#]?\\s*(?:ID|id|Id)?:?\\s*(\\d+)\\s*[\\)\\]\\}]?|[\\-–]\\s*(\\d+)\\s*$|#\\s*(\\d+)/;\n            const idMatch = soforAdi.match(idPattern);\n            \n            if (idMatch) {\n              const extractedId = parseInt(idMatch[1] || idMatch[2] || idMatch[3], 10);\n              if (!isNaN(extractedId)) {\n                // Bu ID'ye sahip araç var mı kontrol et\n                try {\n                  const aracById = await prisma.araclar.findUnique({\n                    where: {\n                      arac_id: extractedId\n                    }\n                  });\n                  \n                  if (aracById) {\n                    aracId = extractedId;\n                    console.log(`Şöför \"${soforAdi}\" için ID'den araç bulundu: ID ${aracId}`);\n                  } else {\n                    console.log(`ID ${extractedId} için araç bulunamadı`);\n                   \n                    // Otomatik araç kaydı oluştur\n                    const cleanSoforAdi = soforAdi\n                      .replace(/[\\(\\[\\{].*?[\\)\\]\\}]/g, '')\n                      .replace(/[\\-–]\\s*\\d+\\s*$/g, '')\n                      .replace(/\\s*ID:?\\s*\\d+/gi, '')\n                      .replace(/#\\s*\\d+/g, '')\n                      .trim();\n                    \n                    if (cleanSoforAdi) {\n                      try {\n                        // Önce aynı isimde araç var mı kontrol et\n                        const mevcutArac = await prisma.araclar.findFirst({\n                          where: {\n                            sofor_adi: cleanSoforAdi,\n                            sirket_id: sirketId\n                          }\n                        });\n                        \n                        if (!mevcutArac) {\n                          // Yeni araç oluştur\n                          const yeniArac = await prisma.araclar.create({\n                            data: {\n                              plaka: `PLAKA-${extractedId}`, // Geçici plaka\n                              sofor_adi: cleanSoforAdi,\n                              vergi_numarasi: '00000000000', // Geçici vergi no\n                              sirket_id: sirketId\n                  }\n                          });\n                          \n                          aracId = yeniArac.arac_id;\n                          console.log(`Şöför \"${cleanSoforAdi}\" için yeni araç oluşturuldu: ID ${aracId}`);\n                        } else {\n                          aracId = mevcutArac.arac_id;\n                          console.log(`Şöför \"${cleanSoforAdi}\" için mevcut araç kullanıldı: ID ${aracId}`);\n                        }\n                      } catch (e) {\n                        console.error('Otomatik araç oluşturma hatası:', e);\n                      }\n                    }\n                  }\n                } catch (e) {\n                  console.error('Araç ID sorgusu sırasında hata:', e);\n                }\n              }\n            }\n            }\n            \n            // Hala araç bulunamadıysa, şöför adıyla daha esnek bir şekilde ara\n            if (!aracId) {\n              // Parantez, köşeli parantez veya ID bilgisini temizle\n              const cleanSoforAdi = soforAdi\n                .replace(/[\\(\\[\\{].*?[\\)\\]\\}]/g, '') // Parantez içini sil\n                .replace(/[\\-–]\\s*\\d+\\s*$/g, '') // Sondaki tire ve rakamı sil\n                .replace(/\\s*ID:?\\s*\\d+/gi, '') // ID:123 formatını sil\n                .replace(/#\\s*\\d+/g, '') // #123 formatını sil\n                .trim();\n              \n              if (cleanSoforAdi) {\n                try {\n                  // Esnek arama - tam eşleşmede başarısız olduysa sadece kısmi eşleşme dene\n                  console.log(`Şöför \"${cleanSoforAdi}\" için esnek arama yapılıyor...`);\n                  \n                  // Türkçe karakterleri dönüştürme fonksiyonu\n                  const turkishChars: Record<string, string> = {\n                    'ç': 'c', 'ğ': 'g', 'ı': 'i', 'İ': 'i', 'ö': 'o', 'ş': 's', 'ü': 'u',\n                    'Ç': 'c', 'Ğ': 'g', 'I': 'i', 'Ö': 'o', 'Ş': 's', 'Ü': 'u'\n                  };\n                  \n                  // Türkçe karakterleri dönüştür\n                  const normalizeName = (name: string): string => {\n                    return name.split('').map(c => turkishChars[c as keyof typeof turkishChars] || c).join('');\n                  };\n                  \n                  // Daha esnek bir arama algoritması uygulayalım - veritabanındaki isimle karşılaştırma\n                  const tum_araclar = await prisma.araclar.findMany({\n                    where: {\n                      sirket_id: sirketId\n                    },\n                    select: {\n                      arac_id: true,\n                      sofor_adi: true\n                    }\n                  });\n                  \n                  // Önce tam olarak eşleşen (case insensitive) bir araç arayalım\n                  let eslesenArac = tum_araclar.find(a => \n                    a.sofor_adi.toLowerCase().trim() === cleanSoforAdi.toLowerCase().trim()\n                  );\n                  \n                  // Tam eşleşme yoksa, contains ile arayalım\n                  if (!eslesenArac) {\n                    eslesenArac = tum_araclar.find(a => \n                      a.sofor_adi.toLowerCase().includes(cleanSoforAdi.toLowerCase()) ||\n                      cleanSoforAdi.toLowerCase().includes(a.sofor_adi.toLowerCase())\n                    );\n                  }\n                  \n                  // Türkçe karakter dönüşümlü arama\n                  if (!eslesenArac) {\n                    const normalizedSoforAdi = normalizeName(cleanSoforAdi.toLowerCase());\n                    \n                    // Türkçe karakter dönüşümlü eşleşme ara\n                    eslesenArac = tum_araclar.find(a => {\n                      const normalizedDbName = normalizeName(a.sofor_adi.toLowerCase());\n                      return normalizedDbName === normalizedSoforAdi || \n                             normalizedDbName.includes(normalizedSoforAdi) ||\n                             normalizedSoforAdi.includes(normalizedDbName);\n                    });\n                  }\n                  \n                  if (eslesenArac) {\n                    aracId = eslesenArac.arac_id;\n                    console.log(`Şöför \"${cleanSoforAdi}\" için araç bulundu: ID ${aracId}, Veritabanındaki şöför adı: \"${eslesenArac.sofor_adi}\"`);\n                  } else {\n                    // Şirket ID kısıtlamasını kaldırarak tekrar dene\n                    console.log(`Şöför \"${cleanSoforAdi}\" için araç bulunamadı, tüm şirketlerde aranıyor...`);\n                    \n                    // Tüm şirketlerdeki araçları getir\n                    const tumSirketlerAraclar = await prisma.araclar.findMany({\n                      select: {\n                        arac_id: true,\n                        sofor_adi: true,\n                        sirket_id: true\n                      }\n                    });\n                    \n                    // Aynı eşleştirme algoritmalarını tüm araçlar için uygula\n                    let eslesenAracTumSirketler = tumSirketlerAraclar.find(a => \n                      a.sofor_adi.toLowerCase().trim() === cleanSoforAdi.toLowerCase().trim()\n                    );\n                    \n                    // Tam eşleşme yoksa, contains ile arayalım\n                    if (!eslesenAracTumSirketler) {\n                      eslesenAracTumSirketler = tumSirketlerAraclar.find(a => \n                        a.sofor_adi.toLowerCase().includes(cleanSoforAdi.toLowerCase()) ||\n                        cleanSoforAdi.toLowerCase().includes(a.sofor_adi.toLowerCase())\n                      );\n                    }\n                    \n                    // Türkçe karakter dönüşümlü arama\n                    if (!eslesenAracTumSirketler) {\n                      const normalizedSoforAdi = normalizeName(cleanSoforAdi.toLowerCase());\n                      \n                      // Türkçe karakter dönüşümlü eşleşme ara\n                      eslesenAracTumSirketler = tumSirketlerAraclar.find(a => {\n                        const normalizedDbName = normalizeName(a.sofor_adi.toLowerCase());\n                        return normalizedDbName === normalizedSoforAdi || \n                               normalizedDbName.includes(normalizedSoforAdi) ||\n                               normalizedSoforAdi.includes(normalizedDbName);\n                      });\n                    }\n                    \n                    if (eslesenAracTumSirketler) {\n                      aracId = eslesenAracTumSirketler.arac_id;\n                      console.log(`Başka şirkette (${eslesenAracTumSirketler.sirket_id}) şöför \"${cleanSoforAdi}\" için araç bulundu: ID ${aracId}, Veritabanındaki şöför adı: \"${eslesenAracTumSirketler.sofor_adi}\"`);\n              } else {\n                      console.log(`Şöför \"${cleanSoforAdi}\" için hiçbir şirkette araç bulunamadı`);\n                      \n                      // Otomatik araç kaydı oluştur\n                      try {\n                        // Yeni araç oluştur\n                        const yeniArac = await prisma.araclar.create({\n                          data: {\n                            plaka: `PLAKA-${Date.now()}`, // Zaman damgalı geçici plaka\n                            sofor_adi: cleanSoforAdi,\n                            vergi_numarasi: '00000000000', // Geçici vergi no\n                            sirket_id: sirketId\n                          }\n                        });\n                        \n                        aracId = yeniArac.arac_id;\n                        console.log(`Şöför \"${cleanSoforAdi}\" için otomatik araç oluşturuldu: ID ${aracId}`);\n                        hatalar.push(`Uyarı: Şöför \"${cleanSoforAdi}\" için otomatik araç kaydı oluşturuldu (ID: ${aracId}). Lütfen araç bilgilerini güncelleyin.`);\n                      } catch (e) {\n                        console.error('Otomatik araç oluşturma hatası:', e);\n                        hatalar.push(`Hata: Şöför \"${cleanSoforAdi}\" için araç oluşturulamadı: ${e instanceof Error ? e.message : 'Bilinmeyen hata'}`);\n                      }\n                    }\n              }\n            } catch (e) {\n              console.error('Araç sorgusu sırasında hata:', e);\n                }\n              }\n            }\n          }\n          \n          // İrsaliye numarasını ve diğer değerleri çıkart\n          const irsaliyeNumarasi = getExcelValue(sefer, 'İrsaliye Numarası') || null;\n          \n          // Tarih alanını işle\n          let irsaliyeTarihi = null;\n          try {\n            const irsaliyeTarihiStr = getExcelValue(sefer, 'İrsaliye Tarihi');\n            if (irsaliyeTarihiStr) {\n              const parsedDate = parseDate(irsaliyeTarihiStr);\n              if (parsedDate && !isNaN(parsedDate.getTime())) {\n                irsaliyeTarihi = parsedDate;\n              }\n            }\n          } catch (e) {\n            console.log('İrsaliye tarihi ayrıştırılamadı, null olarak kaydedilecek');\n          }\n          \n          // Diğer alanları al\n          const cikisYeri = getExcelValue(sefer, 'Çıkış Yeri') || '';\n          const tahliyeEdilenFirma = getExcelValue(sefer, 'Tahliye Edilen Firma') || '';\n          const tahliyeYeri = getExcelValue(sefer, 'Tahliye Yeri/Tesisi') || getExcelValue(sefer, 'Tahliye Yeri') || '';\n          const tonajKg = getExcelValue(sefer, 'Tonaj/Kg') || '';\n          \n          // Araç tipini tonaj değerine göre belirle\n          let aracTipi = '';\n          if (tonajKg) {\n            // Tonaj değerini parse et (kg cinsinden olabilir)\n            const tonajStr = tonajKg.toString().replace(/[^\\d.,]/g, '').replace(',', '.');\n            const tonajValue = parseFloat(tonajStr);\n            \n            if (!isNaN(tonajValue)) {\n              // Eğer değer 1000'den büyükse kg cinsinden olabilir, ton'a çevir\n              const tonajTon = tonajValue > 1000 ? tonajValue / 1000 : tonajValue;\n              \n              if (tonajTon <= 23) {\n                aracTipi = 'Kamyon';\n              } else {\n                aracTipi = 'Tır';\n              }\n              \n              console.log(`Tonaj: ${tonajTon} ton -> Araç Tipi: ${aracTipi}`);\n            }\n          }\n          \n          if (!aracTipi) {\n            aracTipi = 'Belirtilmemiş';\n            console.log('Tonaj değeri bulunamadı, araç tipi belirtilmemiş olarak ayarlandı');\n          }\n          \n          // Sayısal değerleri parse et\n          const tasimaFiyatiStr = getTasimaFiyati(sefer);\n          const soforUcretiStr = getExcelValue(sefer, 'Şöför Ücreti');\n          const soforFaturaUcretiStr = getExcelValue(sefer, 'Şöför Fatura Ücreti');\n          const mtStr = getExcelValue(sefer, 'MT');\n          \n          // Debug için mevcut sütunları göster\n          console.log('Mevcut Excel sütunları:', Object.keys(sefer.tumVeriler || {}));\n          console.log('Şöför Ücreti ham değer:', soforUcretiStr);\n          console.log('Şöför Fatura Ücreti ham değer:', soforFaturaUcretiStr);\n          \n          const sirketten_alinan_ucret = tasimaFiyatiStr || 0;\n          const sofore_odenen_ucret = soforUcretiStr ? parseFloat(soforUcretiStr.toString().replace(/[^\\d.,]/g, '').replace(',', '.')) || 0 : 0;\n          const sofor_fatura_ucreti = soforFaturaUcretiStr ? parseFloat(soforFaturaUcretiStr.toString().replace(/[^\\d.,]/g, '').replace(',', '.')) || 0 : 0;\n          const mt = mtStr ? parseFloat(mtStr.toString().replace(/[^\\d.,]/g, '').replace(',', '.')) : null;\n          \n          console.log('Parse edilmiş değerler:', {\n            sirketten_alinan_ucret,\n            sofore_odenen_ucret,\n            sofor_fatura_ucreti\n          });\n          \n          // Açıklama alanı\n          const aciklama = getExcelValue(sefer, 'TOPLAM KM VEYA FARK') || getExcelValue(sefer, 'Toplam KM Veya Fark') || null;\n          \n          // arac_id değerini loglayalım ve seferi kaydedelim\n          console.log(`===> Kaydedilecek sefer için arac_id: ${aracId}, tipi: ${typeof aracId}, soforAdi: ${soforAdi}`);\n          \n          // arac_id null veya undefined değilse sayısal tipe çevir\n          const parsedAracId = aracId !== null && aracId !== undefined ? Number(aracId) : null;\n          \n          // Eğer halen null değilse ve geçersiz bir sayı değilse (NaN) kullan\n          const finalAracId = parsedAracId !== null && !isNaN(parsedAracId) ? parsedAracId : null;\n          \n          console.log(`===> Dönüştürülmüş arac_id: ${finalAracId}, tipi: ${typeof finalAracId}`);\n          \n          // Seferi veritabanına kaydet\n          await prisma.seferler.create({\n            data: {\n              sira_no: seferNo,\n              irsaliye_numarasi: irsaliyeNumarasi,\n              irsaliye_tarihi: irsaliyeTarihi,\n              kalkis_saati: null, // Eski verilerde genellikle saat bilgisi yok\n              varis_saati: null,\n              cikis_yeri: cikisYeri,\n              tahliye_edilen_firma: tahliyeEdilenFirma,\n              tahliye_yeri: tahliyeYeri,\n              tonaj_kg: tonajKg,\n              arac_tipi: aracTipi,\n              mt: mt,\n              aciklama: aciklama,\n              sirketten_alinan_ucret: sirketten_alinan_ucret,\n              sofore_odenen_ucret: sofore_odenen_ucret,\n              sofor_fatura_ucreti: sofor_fatura_ucreti,\n              sirket_id: sirketId,\n              arac_id: finalAracId,\n              ay: ay,\n              donem: donem\n            }\n          });\n          \n          kaydedilenSeferSayisi++;\n          \n        } catch (error) {\n          console.error(`Şirket ${sirketId}, Sefer ${sefer.seferNo} kaydedilirken hata:`, error);\n          hatalar.push(`Şirket ${sirketId}, Sefer ${sefer.seferNo}: ${error instanceof Error ? error.message : 'Bilinmeyen hata'}`);\n        }\n      }\n    }\n    \n    // Sonuç mesajı\n    let mesaj = `${kaydedilenSeferSayisi} sefer başarıyla kaydedildi.`;\n    if (hatalar.length > 0) {\n      mesaj += ` ${hatalar.length} seferde hata oluştu.`;\n    }\n    \n    return NextResponse.json({\n      success: true,\n      message: mesaj,\n      kaydedilenSeferSayisi,\n      hataSayisi: hatalar.length,\n      hatalar: hatalar.slice(0, 10) // İlk 10 hatayı göster\n    });\n    \n  } catch (error) {\n    console.error('Eski veri yükleme hatası:', error);\n    return NextResponse.json({\n      error: 'Veri kaydedilirken bir hata oluştu: ' + (error instanceof Error ? error.message : 'Bilinmeyen hata')\n    }, { status: 500 });\n  }\n}\n\n// Excel'den değer alma fonksiyonu\nfunction getExcelValue(sefer: any, columnName: string): string | null {\n  if (!sefer.tumVeriler) return null;\n  \n  // Şöför için özel arama\n  if (columnName === 'Şöför') {\n    console.log('>>> Şöför değeri aranıyor...');\n    \n    // Önce tam eşleşme ara\n    if (sefer.tumVeriler[columnName] !== undefined && \n        sefer.tumVeriler[columnName] !== null && \n        sefer.tumVeriler[columnName] !== '') {\n      console.log('>>> Tam eşleşme bulundu:', sefer.tumVeriler[columnName]);\n      return sefer.tumVeriler[columnName].toString();\n    }\n    \n    // Kısmi eşleşme ara\n    const soforKeys = Object.keys(sefer.tumVeriler).filter(key => {\n      const lowerKey = key.toLowerCase();\n      return lowerKey.includes('şöför') || \n             lowerKey.includes('şoför') || \n             lowerKey.includes('soför') || \n             lowerKey.includes('sofor') ||\n             lowerKey.includes('driver') ||\n             lowerKey.includes('sürücü');\n    });\n    \n    if (soforKeys.length > 0) {\n      // En uygun anahtar (en kısa olan) şöför adıdır, fiyat vs değil\n      const bestSoforKey = soforKeys.sort((a, b) => a.length - b.length)[0];\n      console.log('>>> Şöför için en uygun sütun bulundu:', bestSoforKey);\n      \n      if (sefer.tumVeriler[bestSoforKey]) {\n        console.log('>>> Şöför değeri:', sefer.tumVeriler[bestSoforKey]);\n        return sefer.tumVeriler[bestSoforKey].toString();\n      }\n    }\n    \n    console.log('>>> Şöför değeri bulunamadı!');\n    return null;\n  }\n  \n  // Öncelikle tam eşleşme ara\n  if (sefer.tumVeriler[columnName] !== undefined && \n      sefer.tumVeriler[columnName] !== null && \n      sefer.tumVeriler[columnName] !== '') {\n    return sefer.tumVeriler[columnName].toString();\n  }\n  \n  // Şöför Ücreti için özel arama\n  if (columnName === 'Şöför Ücreti') {\n    const matchingKey = Object.keys(sefer.tumVeriler).find(k => {\n      const lowerK = k.toLowerCase();\n      return (lowerK.includes('şöför') || lowerK.includes('şoför') || \n              lowerK.includes('soför') || lowerK.includes('sofor')) &&\n             (lowerK.includes('ücret') || lowerK.includes('ucret')) &&\n             !lowerK.includes('fatura');\n    });\n    \n    if (matchingKey && sefer.tumVeriler[matchingKey] !== null && \n        sefer.tumVeriler[matchingKey] !== undefined && \n        sefer.tumVeriler[matchingKey] !== '') {\n      console.log(`Şöför Ücreti için eşleşen sütun: ${matchingKey}`);\n      return sefer.tumVeriler[matchingKey].toString();\n    }\n  }\n  \n  // Şöför Fatura Ücreti için özel arama\n  if (columnName === 'Şöför Fatura Ücreti') {\n    const matchingKey = Object.keys(sefer.tumVeriler).find(k => {\n      const lowerK = k.toLowerCase();\n      return (lowerK.includes('şöför') || lowerK.includes('şoför') || \n              lowerK.includes('soför') || lowerK.includes('sofor')) &&\n             lowerK.includes('fatura');\n    });\n    \n    if (matchingKey && sefer.tumVeriler[matchingKey] !== null && \n        sefer.tumVeriler[matchingKey] !== undefined && \n        sefer.tumVeriler[matchingKey] !== '') {\n      console.log(`Şöför Fatura Ücreti için eşleşen sütun: ${matchingKey}`);\n      return sefer.tumVeriler[matchingKey].toString();\n    }\n  }\n  \n  // Genel kısmi eşleşme ara (büyük/küçük harf duyarsız)\n  const matchingKey = Object.keys(sefer.tumVeriler).find(key => \n    key.toLowerCase().includes(columnName.toLowerCase()) ||\n    columnName.toLowerCase().includes(key.toLowerCase())\n  );\n  \n  if (matchingKey && sefer.tumVeriler[matchingKey] !== null && \n      sefer.tumVeriler[matchingKey] !== undefined && \n      sefer.tumVeriler[matchingKey] !== '') {\n    return sefer.tumVeriler[matchingKey].toString();\n  }\n  \n  return null;\n}\n\n// Tarih ayrıştırma fonksiyonu\nfunction parseDate(dateStr: string | null): Date | null {\n  if (!dateStr) return null;\n  \n  try {\n    const cleanDateStr = dateStr.toString().trim();\n    \n    // Farklı tarih formatlarını dene\n    let parsedDate = null;\n    \n    // DD MM YYYY formatı (boşlukla ayrılmış)\n    if (cleanDateStr.includes(' ') && !cleanDateStr.includes('.') && !cleanDateStr.includes('/') && !cleanDateStr.includes('-')) {\n      const parts = cleanDateStr.split(' ').filter(part => part.trim() !== '');\n      if (parts.length >= 3) {\n        const gun = parseInt(parts[0], 10);\n        const ay = parseInt(parts[1], 10);\n        const yil = parseInt(parts[2], 10);\n        \n        if (!isNaN(gun) && !isNaN(ay) && !isNaN(yil) && \n            gun >= 1 && gun <= 31 && ay >= 1 && ay <= 12) {\n          parsedDate = new Date(yil, ay - 1, gun);\n        }\n      }\n    }\n    // DD.MM.YYYY formatı\n    else if (cleanDateStr.includes('.')) {\n      const [gun, ay, yil] = cleanDateStr.split('.');\n      if (gun && ay && yil) {\n        parsedDate = new Date(parseInt(yil), parseInt(ay) - 1, parseInt(gun));\n      }\n    }\n    // DD/MM/YYYY formatı\n    else if (cleanDateStr.includes('/')) {\n      const [gun, ay, yil] = cleanDateStr.split('/');\n      if (gun && ay && yil) {\n        parsedDate = new Date(parseInt(yil), parseInt(ay) - 1, parseInt(gun));\n      }\n    }\n    // YYYY-MM-DD formatı\n    else if (cleanDateStr.includes('-')) {\n      parsedDate = new Date(cleanDateStr);\n    }\n    // Excel serial number formatı (sayı)\n    else if (!isNaN(Number(cleanDateStr))) {\n      // Excel'de tarihler 1900-01-01'den itibaren gün sayısı olarak saklanır\n      const excelEpoch = new Date(1900, 0, 1);\n      const days = parseInt(cleanDateStr) - 2; // Excel'in leap year bug'ı için -2\n      parsedDate = new Date(excelEpoch.getTime() + days * 24 * 60 * 60 * 1000);\n    }\n    \n    if (parsedDate && !isNaN(parsedDate.getTime())) {\n      return parsedDate;\n    }\n  } catch (e) {\n    console.error('Tarih ayrıştırma hatası:', e);\n  }\n  \n  return null;\n}\n\n// Frontend'teki getTasimaFiyati fonksiyonunun kopyası - sadece Ton/Fiyat sütununu alıyor\nfunction getTasimaFiyati(sefer: any): number {\n  if (!sefer.tumVeriler) return 0;\n  \n  // Sadece Ton/Fiyat sütununu al\n  let tonFiyatValue = null;\n  \n  // Tam eşleşme ara\n  if (sefer.tumVeriler['Ton/Fiyat']) {\n    tonFiyatValue = sefer.tumVeriler['Ton/Fiyat'];\n    console.log('Ton/Fiyat değeri bulundu:', tonFiyatValue);\n  }\n  \n  // Ton/Fiyat değeri varsa onu kullan\n  if (tonFiyatValue !== null && tonFiyatValue !== undefined && tonFiyatValue !== '') {\n    const numValue = parseFloat(String(tonFiyatValue).replace(/[^\\d.,]/g, '').replace(',', '.'));\n    if (!isNaN(numValue)) {\n      console.log('Ton/Fiyat parse edildi:', numValue);\n      return numValue;\n    }\n  }\n  \n  console.log('Ton/Fiyat sütunu bulunamadı veya boş');\n  return 0;\n} "],"names":[],"mappings":"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","debugId":null}}]
}