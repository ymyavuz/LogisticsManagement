
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SirketlerScalarFieldEnum = {
  sirket_id: 'sirket_id',
  sirket_adi: 'sirket_adi',
  vergi_numarasi: 'vergi_numarasi'
};

exports.Prisma.AraclarScalarFieldEnum = {
  arac_id: 'arac_id',
  plaka: 'plaka',
  sofor_adi: 'sofor_adi',
  vergi_numarasi: 'vergi_numarasi',
  sirket_id: 'sirket_id'
};

exports.Prisma.SeferlerScalarFieldEnum = {
  sefer_id: 'sefer_id',
  sira_no: 'sira_no',
  irsaliye_numarasi: 'irsaliye_numarasi',
  irsaliye_tarihi: 'irsaliye_tarihi',
  kalkis_saati: 'kalkis_saati',
  varis_saati: 'varis_saati',
  cikis_yeri: 'cikis_yeri',
  tahliye_edilen_firma: 'tahliye_edilen_firma',
  tahliye_yeri: 'tahliye_yeri',
  tonaj_kg: 'tonaj_kg',
  arac_tipi: 'arac_tipi',
  mt: 'mt',
  aciklama: 'aciklama',
  sirketten_alinan_ucret: 'sirketten_alinan_ucret',
  sofore_odenen_ucret: 'sofore_odenen_ucret',
  sirket_id: 'sirket_id',
  arac_id: 'arac_id'
};

exports.Prisma.SirketFiyatListesiScalarFieldEnum = {
  fiyat_listesi_id: 'fiyat_listesi_id',
  sirket_id: 'sirket_id',
  tahliye_yeri: 'tahliye_yeri',
  arac_tipi: 'arac_tipi',
  ucret: 'ucret'
};

exports.Prisma.SirketCeklerScalarFieldEnum = {
  cek_id: 'cek_id',
  sirket_id: 'sirket_id',
  cek_tutari: 'cek_tutari',
  cek_alinma_tarihi: 'cek_alinma_tarihi',
  cek_odeme_tarihi: 'cek_odeme_tarihi',
  durum: 'durum',
  aciklama: 'aciklama',
  kayit_tarihi: 'kayit_tarihi'
};

exports.Prisma.AracOdemeKayitlariScalarFieldEnum = {
  odeme_id: 'odeme_id',
  arac_id: 'arac_id',
  odeme_tutari: 'odeme_tutari',
  odeme_tarihi: 'odeme_tarihi',
  aciklama: 'aciklama',
  kayit_tarihi: 'kayit_tarihi'
};

exports.Prisma.YuklenenExcelDosyalarScalarFieldEnum = {
  dosya_id: 'dosya_id',
  dosya_adi: 'dosya_adi',
  dosya_yolu: 'dosya_yolu',
  yukleme_tarihi: 'yukleme_tarihi',
  aciklama: 'aciklama'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Sirketler: 'Sirketler',
  Araclar: 'Araclar',
  Seferler: 'Seferler',
  SirketFiyatListesi: 'SirketFiyatListesi',
  SirketCekler: 'SirketCekler',
  AracOdemeKayitlari: 'AracOdemeKayitlari',
  YuklenenExcelDosyalar: 'YuklenenExcelDosyalar'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
